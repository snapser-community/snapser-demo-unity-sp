/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Snapser.Client;
using Snapser.Model;

namespace Snapser.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Append Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all append blobs for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="ownerId">Append-blob owners user IDs</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>StorageBatchGetAppendBlobsResponse</returns>
        StorageBatchGetAppendBlobsResponse BatchGetAppendBlobs(string accessType, List<string> ownerId, string appendBlobKey, string token);

        /// <summary>
        /// Append Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all append blobs for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="ownerId">Append-blob owners user IDs</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>ApiResponse of StorageBatchGetAppendBlobsResponse</returns>
        ApiResponse<StorageBatchGetAppendBlobsResponse> BatchGetAppendBlobsWithHttpInfo(string accessType, List<string> ownerId, string appendBlobKey, string token);
        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all blobs for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="ownerId">Blob owners user IDs</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>StorageBatchGetBlobsResponse</returns>
        StorageBatchGetBlobsResponse BatchGetBlobs(string accessType, List<string> ownerId, string blobKey, string token);

        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all blobs for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="ownerId">Blob owners user IDs</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>ApiResponse of StorageBatchGetBlobsResponse</returns>
        ApiResponse<StorageBatchGetBlobsResponse> BatchGetBlobsWithHttpInfo(string accessType, List<string> ownerId, string blobKey, string token);
        /// <summary>
        /// Counters (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all counters for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="ownerId">Counter owners user IDs</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>StorageBatchGetCountersResponse</returns>
        StorageBatchGetCountersResponse BatchGetCounters(string accessType, List<string> ownerId, string counterKey, string token);

        /// <summary>
        /// Counters (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all counters for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="ownerId">Counter owners user IDs</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>ApiResponse of StorageBatchGetCountersResponse</returns>
        ApiResponse<StorageBatchGetCountersResponse> BatchGetCountersWithHttpInfo(string accessType, List<string> ownerId, string counterKey, string token);
        /// <summary>
        /// Counters (App Auth)
        /// </summary>
        /// <remarks>
        /// Increment multiple counters
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>StorageBatchIncrementCounterResponse</returns>
        StorageBatchIncrementCounterResponse BatchIncrementCounter(string token, StorageBatchIncrementCounterRequest body);

        /// <summary>
        /// Counters (App Auth)
        /// </summary>
        /// <remarks>
        /// Increment multiple counters
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageBatchIncrementCounterResponse</returns>
        ApiResponse<StorageBatchIncrementCounterResponse> BatchIncrementCounterWithHttpInfo(string token, StorageBatchIncrementCounterRequest body);
        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Inserts multiple blobs. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>StorageBatchInsertBlobResponse</returns>
        StorageBatchInsertBlobResponse BatchInsertBlob(string token, StorageBatchInsertBlobRequest body);

        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Inserts multiple blobs. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageBatchInsertBlobResponse</returns>
        ApiResponse<StorageBatchInsertBlobResponse> BatchInsertBlobWithHttpInfo(string token, StorageBatchInsertBlobRequest body);
        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Replace multiple blobs. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>StorageBatchReplaceBlobResponse</returns>
        StorageBatchReplaceBlobResponse BatchReplaceBlob(string token, StorageBatchReplaceBlobRequest body);

        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Replace multiple blobs. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageBatchReplaceBlobResponse</returns>
        ApiResponse<StorageBatchReplaceBlobResponse> BatchReplaceBlobWithHttpInfo(string token, StorageBatchReplaceBlobRequest body);
        /// <summary>
        /// Append Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Apend to the existing blobs. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>StorageBatchUpdateAppendBlobResponse</returns>
        StorageBatchUpdateAppendBlobResponse BatchUpdateAppendBlob(string token, StorageBatchUpdateAppendBlobRequest body);

        /// <summary>
        /// Append Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Apend to the existing blobs. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageBatchUpdateAppendBlobResponse</returns>
        ApiResponse<StorageBatchUpdateAppendBlobResponse> BatchUpdateAppendBlobWithHttpInfo(string token, StorageBatchUpdateAppendBlobRequest body);
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteAppendBlobResponse</returns>
        StorageDeleteAppendBlobResponse DeleteAppendBlob(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string));

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteAppendBlobResponse</returns>
        ApiResponse<StorageDeleteAppendBlobResponse> DeleteAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string));
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Delete a blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteBlobResponse</returns>
        StorageDeleteBlobResponse DeleteBlob(string ownerId, string accessType, string blobKey, string token, string cas = default(string));

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Delete a blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteBlobResponse</returns>
        ApiResponse<StorageDeleteBlobResponse> DeleteBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, string cas = default(string));
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the value of an append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetAppendBlobResponse</returns>
        StorageGetAppendBlobResponse GetAppendBlob(string ownerId, string accessType, string appendBlobKey, string token);

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the value of an append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetAppendBlobResponse</returns>
        ApiResponse<StorageGetAppendBlobResponse> GetAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token);
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetBlobResponse</returns>
        StorageGetBlobResponse GetBlob(string ownerId, string accessType, string blobKey, string token);

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetBlobResponse</returns>
        ApiResponse<StorageGetBlobResponse> GetBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token);
        /// <summary>
        /// Cas
        /// </summary>
        /// <remarks>
        /// Retrieve the cas for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetCasResponse</returns>
        StorageGetCasResponse GetCas(string ownerId, string accessType, string blobKey, string token);

        /// <summary>
        /// Cas
        /// </summary>
        /// <remarks>
        /// Retrieve the cas for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetCasResponse</returns>
        ApiResponse<StorageGetCasResponse> GetCasWithHttpInfo(string ownerId, string accessType, string blobKey, string token);
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Retrieve a counter value
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetCounterResponse</returns>
        StorageGetCounterResponse GetCounter(string ownerId, string accessType, string counterKey, string token);

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Retrieve a counter value
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetCounterResponse</returns>
        ApiResponse<StorageGetCounterResponse> GetCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token);
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Increment the counter
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageIncrementCounterResponse</returns>
        StorageIncrementCounterResponse IncrementCounter(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body);

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Increment the counter
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageIncrementCounterResponse</returns>
        ApiResponse<StorageIncrementCounterResponse> IncrementCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body);
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageInsertBlobResponse</returns>
        StorageInsertBlobResponse InsertBlob(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body);

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageInsertBlobResponse</returns>
        ApiResponse<StorageInsertBlobResponse> InsertBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body);
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageReplaceBlobResponse</returns>
        StorageReplaceBlobResponse ReplaceBlob(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body);

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageReplaceBlobResponse</returns>
        ApiResponse<StorageReplaceBlobResponse> ReplaceBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body);
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Reset a counter value to 0
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageResetCounterResponse</returns>
        StorageResetCounterResponse ResetCounter(string ownerId, string accessType, string counterKey, string token);

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Reset a counter value to 0
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageResetCounterResponse</returns>
        ApiResponse<StorageResetCounterResponse> ResetCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token);
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageUpdateAppendBlobResponse</returns>
        StorageUpdateAppendBlobResponse UpdateAppendBlob(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body);

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageUpdateAppendBlobResponse</returns>
        ApiResponse<StorageUpdateAppendBlobResponse> UpdateAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Append Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all append blobs for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="ownerId">Append-blob owners user IDs</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchGetAppendBlobsResponse</returns>
        System.Threading.Tasks.Task<StorageBatchGetAppendBlobsResponse> BatchGetAppendBlobsAsync(string accessType, List<string> ownerId, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Append Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all append blobs for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="ownerId">Append-blob owners user IDs</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchGetAppendBlobsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBatchGetAppendBlobsResponse>> BatchGetAppendBlobsWithHttpInfoAsync(string accessType, List<string> ownerId, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all blobs for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="ownerId">Blob owners user IDs</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchGetBlobsResponse</returns>
        System.Threading.Tasks.Task<StorageBatchGetBlobsResponse> BatchGetBlobsAsync(string accessType, List<string> ownerId, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all blobs for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="ownerId">Blob owners user IDs</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchGetBlobsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBatchGetBlobsResponse>> BatchGetBlobsWithHttpInfoAsync(string accessType, List<string> ownerId, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Counters (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all counters for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="ownerId">Counter owners user IDs</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchGetCountersResponse</returns>
        System.Threading.Tasks.Task<StorageBatchGetCountersResponse> BatchGetCountersAsync(string accessType, List<string> ownerId, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Counters (App Auth)
        /// </summary>
        /// <remarks>
        /// Retrieve all counters for the owners
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="ownerId">Counter owners user IDs</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchGetCountersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBatchGetCountersResponse>> BatchGetCountersWithHttpInfoAsync(string accessType, List<string> ownerId, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Counters (App Auth)
        /// </summary>
        /// <remarks>
        /// Increment multiple counters
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchIncrementCounterResponse</returns>
        System.Threading.Tasks.Task<StorageBatchIncrementCounterResponse> BatchIncrementCounterAsync(string token, StorageBatchIncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Counters (App Auth)
        /// </summary>
        /// <remarks>
        /// Increment multiple counters
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchIncrementCounterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBatchIncrementCounterResponse>> BatchIncrementCounterWithHttpInfoAsync(string token, StorageBatchIncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Inserts multiple blobs. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchInsertBlobResponse</returns>
        System.Threading.Tasks.Task<StorageBatchInsertBlobResponse> BatchInsertBlobAsync(string token, StorageBatchInsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Inserts multiple blobs. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchInsertBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBatchInsertBlobResponse>> BatchInsertBlobWithHttpInfoAsync(string token, StorageBatchInsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Replace multiple blobs. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchReplaceBlobResponse</returns>
        System.Threading.Tasks.Task<StorageBatchReplaceBlobResponse> BatchReplaceBlobAsync(string token, StorageBatchReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Replace multiple blobs. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchReplaceBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBatchReplaceBlobResponse>> BatchReplaceBlobWithHttpInfoAsync(string token, StorageBatchReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Append Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Apend to the existing blobs. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchUpdateAppendBlobResponse</returns>
        System.Threading.Tasks.Task<StorageBatchUpdateAppendBlobResponse> BatchUpdateAppendBlobAsync(string token, StorageBatchUpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Append Blobs (App Auth)
        /// </summary>
        /// <remarks>
        /// Apend to the existing blobs. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchUpdateAppendBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageBatchUpdateAppendBlobResponse>> BatchUpdateAppendBlobWithHttpInfoAsync(string token, StorageBatchUpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteAppendBlobResponse</returns>
        System.Threading.Tasks.Task<StorageDeleteAppendBlobResponse> DeleteAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteAppendBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageDeleteAppendBlobResponse>> DeleteAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Delete a blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteBlobResponse</returns>
        System.Threading.Tasks.Task<StorageDeleteBlobResponse> DeleteBlobAsync(string ownerId, string accessType, string blobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Delete a blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageDeleteBlobResponse>> DeleteBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the value of an append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetAppendBlobResponse</returns>
        System.Threading.Tasks.Task<StorageGetAppendBlobResponse> GetAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the value of an append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetAppendBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageGetAppendBlobResponse>> GetAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetBlobResponse</returns>
        System.Threading.Tasks.Task<StorageGetBlobResponse> GetBlobAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageGetBlobResponse>> GetBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cas
        /// </summary>
        /// <remarks>
        /// Retrieve the cas for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetCasResponse</returns>
        System.Threading.Tasks.Task<StorageGetCasResponse> GetCasAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cas
        /// </summary>
        /// <remarks>
        /// Retrieve the cas for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetCasResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageGetCasResponse>> GetCasWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Retrieve a counter value
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetCounterResponse</returns>
        System.Threading.Tasks.Task<StorageGetCounterResponse> GetCounterAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Retrieve a counter value
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetCounterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageGetCounterResponse>> GetCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Increment the counter
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageIncrementCounterResponse</returns>
        System.Threading.Tasks.Task<StorageIncrementCounterResponse> IncrementCounterAsync(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Increment the counter
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageIncrementCounterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageIncrementCounterResponse>> IncrementCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageInsertBlobResponse</returns>
        System.Threading.Tasks.Task<StorageInsertBlobResponse> InsertBlobAsync(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageInsertBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageInsertBlobResponse>> InsertBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageReplaceBlobResponse</returns>
        System.Threading.Tasks.Task<StorageReplaceBlobResponse> ReplaceBlobAsync(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageReplaceBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageReplaceBlobResponse>> ReplaceBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Reset a counter value to 0
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageResetCounterResponse</returns>
        System.Threading.Tasks.Task<StorageResetCounterResponse> ResetCounterAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Reset a counter value to 0
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageResetCounterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageResetCounterResponse>> ResetCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageUpdateAppendBlobResponse</returns>
        System.Threading.Tasks.Task<StorageUpdateAppendBlobResponse> UpdateAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageUpdateAppendBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageUpdateAppendBlobResponse>> UpdateAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageServiceApi : IStorageServiceApiSync, IStorageServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StorageServiceApi : IDisposable, IStorageServiceApi
    {
        private Snapser.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public StorageServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public StorageServiceApi(string basePath)
        {
            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public StorageServiceApi(Snapser.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public StorageServiceApi(Snapser.Client.ISynchronousClient client, Snapser.Client.IAsynchronousClient asyncClient, Snapser.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Snapser.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Snapser.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Snapser.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Snapser.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Snapser.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Append Blobs (App Auth) Retrieve all append blobs for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="ownerId">Append-blob owners user IDs</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>StorageBatchGetAppendBlobsResponse</returns>
        public StorageBatchGetAppendBlobsResponse BatchGetAppendBlobs(string accessType, List<string> ownerId, string appendBlobKey, string token)
        {
            Snapser.Client.ApiResponse<StorageBatchGetAppendBlobsResponse> localVarResponse = BatchGetAppendBlobsWithHttpInfo(accessType, ownerId, appendBlobKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs (App Auth) Retrieve all append blobs for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="ownerId">Append-blob owners user IDs</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>ApiResponse of StorageBatchGetAppendBlobsResponse</returns>
        public Snapser.Client.ApiResponse<StorageBatchGetAppendBlobsResponse> BatchGetAppendBlobsWithHttpInfo(string accessType, List<string> ownerId, string appendBlobKey, string token)
        {
            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->BatchGetAppendBlobs");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->BatchGetAppendBlobs");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->BatchGetAppendBlobs");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchGetAppendBlobs");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "access_type", accessType));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("multi", "owner_id", ownerId));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "append_blob_key", appendBlobKey));
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageBatchGetAppendBlobsResponse>("/v1/storage/batch/append-blobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGetAppendBlobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs (App Auth) Retrieve all append blobs for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="ownerId">Append-blob owners user IDs</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchGetAppendBlobsResponse</returns>
        public async System.Threading.Tasks.Task<StorageBatchGetAppendBlobsResponse> BatchGetAppendBlobsAsync(string accessType, List<string> ownerId, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BatchGetAppendBlobsWithHttpInfoAsync(accessType, ownerId, appendBlobKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageBatchGetAppendBlobsResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageBatchGetAppendBlobsResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs (App Auth) Retrieve all append blobs for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="ownerId">Append-blob owners user IDs</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchGetAppendBlobsResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageBatchGetAppendBlobsResponse>> BatchGetAppendBlobsWithHttpInfoAsync(string accessType, List<string> ownerId, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->BatchGetAppendBlobs");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->BatchGetAppendBlobs");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->BatchGetAppendBlobs");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchGetAppendBlobs");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "access_type", accessType));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("multi", "owner_id", ownerId));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "append_blob_key", appendBlobKey));
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageBatchGetAppendBlobsResponse>("/v1/storage/batch/append-blobs", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGetAppendBlobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs (App Auth) Retrieve all blobs for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="ownerId">Blob owners user IDs</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>StorageBatchGetBlobsResponse</returns>
        public StorageBatchGetBlobsResponse BatchGetBlobs(string accessType, List<string> ownerId, string blobKey, string token)
        {
            Snapser.Client.ApiResponse<StorageBatchGetBlobsResponse> localVarResponse = BatchGetBlobsWithHttpInfo(accessType, ownerId, blobKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs (App Auth) Retrieve all blobs for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="ownerId">Blob owners user IDs</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>ApiResponse of StorageBatchGetBlobsResponse</returns>
        public Snapser.Client.ApiResponse<StorageBatchGetBlobsResponse> BatchGetBlobsWithHttpInfo(string accessType, List<string> ownerId, string blobKey, string token)
        {
            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->BatchGetBlobs");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->BatchGetBlobs");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->BatchGetBlobs");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchGetBlobs");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "access_type", accessType));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("multi", "owner_id", ownerId));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "blob_key", blobKey));
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageBatchGetBlobsResponse>("/v1/storage/batch/blobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGetBlobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs (App Auth) Retrieve all blobs for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="ownerId">Blob owners user IDs</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchGetBlobsResponse</returns>
        public async System.Threading.Tasks.Task<StorageBatchGetBlobsResponse> BatchGetBlobsAsync(string accessType, List<string> ownerId, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BatchGetBlobsWithHttpInfoAsync(accessType, ownerId, blobKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageBatchGetBlobsResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageBatchGetBlobsResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs (App Auth) Retrieve all blobs for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="ownerId">Blob owners user IDs</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchGetBlobsResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageBatchGetBlobsResponse>> BatchGetBlobsWithHttpInfoAsync(string accessType, List<string> ownerId, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->BatchGetBlobs");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->BatchGetBlobs");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->BatchGetBlobs");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchGetBlobs");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "access_type", accessType));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("multi", "owner_id", ownerId));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "blob_key", blobKey));
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageBatchGetBlobsResponse>("/v1/storage/batch/blobs", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGetBlobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters (App Auth) Retrieve all counters for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="ownerId">Counter owners user IDs</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>StorageBatchGetCountersResponse</returns>
        public StorageBatchGetCountersResponse BatchGetCounters(string accessType, List<string> ownerId, string counterKey, string token)
        {
            Snapser.Client.ApiResponse<StorageBatchGetCountersResponse> localVarResponse = BatchGetCountersWithHttpInfo(accessType, ownerId, counterKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters (App Auth) Retrieve all counters for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="ownerId">Counter owners user IDs</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">(app auth only)</param>
        /// <returns>ApiResponse of StorageBatchGetCountersResponse</returns>
        public Snapser.Client.ApiResponse<StorageBatchGetCountersResponse> BatchGetCountersWithHttpInfo(string accessType, List<string> ownerId, string counterKey, string token)
        {
            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->BatchGetCounters");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->BatchGetCounters");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->BatchGetCounters");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchGetCounters");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "access_type", accessType));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("multi", "owner_id", ownerId));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "counter_key", counterKey));
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageBatchGetCountersResponse>("/v1/storage/batch/counters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGetCounters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters (App Auth) Retrieve all counters for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="ownerId">Counter owners user IDs</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchGetCountersResponse</returns>
        public async System.Threading.Tasks.Task<StorageBatchGetCountersResponse> BatchGetCountersAsync(string accessType, List<string> ownerId, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BatchGetCountersWithHttpInfoAsync(accessType, ownerId, counterKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageBatchGetCountersResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageBatchGetCountersResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters (App Auth) Retrieve all counters for the owners
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="ownerId">Counter owners user IDs</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">(app auth only)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchGetCountersResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageBatchGetCountersResponse>> BatchGetCountersWithHttpInfoAsync(string accessType, List<string> ownerId, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->BatchGetCounters");

            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->BatchGetCounters");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->BatchGetCounters");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchGetCounters");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "access_type", accessType));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("multi", "owner_id", ownerId));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "counter_key", counterKey));
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageBatchGetCountersResponse>("/v1/storage/batch/counters", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchGetCounters", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters (App Auth) Increment multiple counters
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>StorageBatchIncrementCounterResponse</returns>
        public StorageBatchIncrementCounterResponse BatchIncrementCounter(string token, StorageBatchIncrementCounterRequest body)
        {
            Snapser.Client.ApiResponse<StorageBatchIncrementCounterResponse> localVarResponse = BatchIncrementCounterWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters (App Auth) Increment multiple counters
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageBatchIncrementCounterResponse</returns>
        public Snapser.Client.ApiResponse<StorageBatchIncrementCounterResponse> BatchIncrementCounterWithHttpInfo(string token, StorageBatchIncrementCounterRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchIncrementCounter");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->BatchIncrementCounter");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageBatchIncrementCounterResponse>("/v1/storage/batch/counters", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchIncrementCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters (App Auth) Increment multiple counters
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchIncrementCounterResponse</returns>
        public async System.Threading.Tasks.Task<StorageBatchIncrementCounterResponse> BatchIncrementCounterAsync(string token, StorageBatchIncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BatchIncrementCounterWithHttpInfoAsync(token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageBatchIncrementCounterResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageBatchIncrementCounterResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters (App Auth) Increment multiple counters
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchIncrementCounterResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageBatchIncrementCounterResponse>> BatchIncrementCounterWithHttpInfoAsync(string token, StorageBatchIncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchIncrementCounter");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->BatchIncrementCounter");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageBatchIncrementCounterResponse>("/v1/storage/batch/counters", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchIncrementCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs (App Auth) Inserts multiple blobs. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>StorageBatchInsertBlobResponse</returns>
        public StorageBatchInsertBlobResponse BatchInsertBlob(string token, StorageBatchInsertBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageBatchInsertBlobResponse> localVarResponse = BatchInsertBlobWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs (App Auth) Inserts multiple blobs. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageBatchInsertBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageBatchInsertBlobResponse> BatchInsertBlobWithHttpInfo(string token, StorageBatchInsertBlobRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchInsertBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->BatchInsertBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StorageBatchInsertBlobResponse>("/v1/storage/batch/blobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchInsertBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs (App Auth) Inserts multiple blobs. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchInsertBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageBatchInsertBlobResponse> BatchInsertBlobAsync(string token, StorageBatchInsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BatchInsertBlobWithHttpInfoAsync(token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageBatchInsertBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageBatchInsertBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs (App Auth) Inserts multiple blobs. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchInsertBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageBatchInsertBlobResponse>> BatchInsertBlobWithHttpInfoAsync(string token, StorageBatchInsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchInsertBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->BatchInsertBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<StorageBatchInsertBlobResponse>("/v1/storage/batch/blobs", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchInsertBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs (App Auth) Replace multiple blobs. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>StorageBatchReplaceBlobResponse</returns>
        public StorageBatchReplaceBlobResponse BatchReplaceBlob(string token, StorageBatchReplaceBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageBatchReplaceBlobResponse> localVarResponse = BatchReplaceBlobWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs (App Auth) Replace multiple blobs. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageBatchReplaceBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageBatchReplaceBlobResponse> BatchReplaceBlobWithHttpInfo(string token, StorageBatchReplaceBlobRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchReplaceBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->BatchReplaceBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageBatchReplaceBlobResponse>("/v1/storage/batch/blobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchReplaceBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs (App Auth) Replace multiple blobs. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchReplaceBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageBatchReplaceBlobResponse> BatchReplaceBlobAsync(string token, StorageBatchReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BatchReplaceBlobWithHttpInfoAsync(token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageBatchReplaceBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageBatchReplaceBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs (App Auth) Replace multiple blobs. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchReplaceBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageBatchReplaceBlobResponse>> BatchReplaceBlobWithHttpInfoAsync(string token, StorageBatchReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchReplaceBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->BatchReplaceBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageBatchReplaceBlobResponse>("/v1/storage/batch/blobs", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchReplaceBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs (App Auth) Apend to the existing blobs. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>StorageBatchUpdateAppendBlobResponse</returns>
        public StorageBatchUpdateAppendBlobResponse BatchUpdateAppendBlob(string token, StorageBatchUpdateAppendBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageBatchUpdateAppendBlobResponse> localVarResponse = BatchUpdateAppendBlobWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs (App Auth) Apend to the existing blobs. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageBatchUpdateAppendBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageBatchUpdateAppendBlobResponse> BatchUpdateAppendBlobWithHttpInfo(string token, StorageBatchUpdateAppendBlobRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchUpdateAppendBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->BatchUpdateAppendBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageBatchUpdateAppendBlobResponse>("/v1/storage/batch/append-blobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs (App Auth) Apend to the existing blobs. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageBatchUpdateAppendBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageBatchUpdateAppendBlobResponse> BatchUpdateAppendBlobAsync(string token, StorageBatchUpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = BatchUpdateAppendBlobWithHttpInfoAsync(token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageBatchUpdateAppendBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageBatchUpdateAppendBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs (App Auth) Apend to the existing blobs. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">(app auth only)</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageBatchUpdateAppendBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageBatchUpdateAppendBlobResponse>> BatchUpdateAppendBlobWithHttpInfoAsync(string token, StorageBatchUpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->BatchUpdateAppendBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->BatchUpdateAppendBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageBatchUpdateAppendBlobResponse>("/v1/storage/batch/append-blobs", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Deletes the append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteAppendBlobResponse</returns>
        public StorageDeleteAppendBlobResponse DeleteAppendBlob(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string))
        {
            Snapser.Client.ApiResponse<StorageDeleteAppendBlobResponse> localVarResponse = DeleteAppendBlobWithHttpInfo(ownerId, accessType, appendBlobKey, token, cas);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Deletes the append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteAppendBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageDeleteAppendBlobResponse> DeleteAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->DeleteAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->DeleteAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->DeleteAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->DeleteAppendBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<StorageDeleteAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Deletes the append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteAppendBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageDeleteAppendBlobResponse> DeleteAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DeleteAppendBlobWithHttpInfoAsync(ownerId, accessType, appendBlobKey, token, cas, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageDeleteAppendBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageDeleteAppendBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Deletes the append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteAppendBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageDeleteAppendBlobResponse>> DeleteAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->DeleteAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->DeleteAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->DeleteAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->DeleteAppendBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<StorageDeleteAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Delete a blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteBlobResponse</returns>
        public StorageDeleteBlobResponse DeleteBlob(string ownerId, string accessType, string blobKey, string token, string cas = default(string))
        {
            Snapser.Client.ApiResponse<StorageDeleteBlobResponse> localVarResponse = DeleteBlobWithHttpInfo(ownerId, accessType, blobKey, token, cas);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Delete a blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageDeleteBlobResponse> DeleteBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, string cas = default(string))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->DeleteBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->DeleteBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->DeleteBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->DeleteBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<StorageDeleteBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Delete a blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageDeleteBlobResponse> DeleteBlobAsync(string ownerId, string accessType, string blobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DeleteBlobWithHttpInfoAsync(ownerId, accessType, blobKey, token, cas, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageDeleteBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageDeleteBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Delete a blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageDeleteBlobResponse>> DeleteBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->DeleteBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->DeleteBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->DeleteBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->DeleteBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<StorageDeleteBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Retrieve the value of an append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetAppendBlobResponse</returns>
        public StorageGetAppendBlobResponse GetAppendBlob(string ownerId, string accessType, string appendBlobKey, string token)
        {
            Snapser.Client.ApiResponse<StorageGetAppendBlobResponse> localVarResponse = GetAppendBlobWithHttpInfo(ownerId, accessType, appendBlobKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Retrieve the value of an append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetAppendBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageGetAppendBlobResponse> GetAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->GetAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->GetAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->GetAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->GetAppendBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageGetAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Retrieve the value of an append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetAppendBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageGetAppendBlobResponse> GetAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetAppendBlobWithHttpInfoAsync(ownerId, accessType, appendBlobKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageGetAppendBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageGetAppendBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Retrieve the value of an append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetAppendBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageGetAppendBlobResponse>> GetAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->GetAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->GetAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->GetAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->GetAppendBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageGetAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Retrieve the blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetBlobResponse</returns>
        public StorageGetBlobResponse GetBlob(string ownerId, string accessType, string blobKey, string token)
        {
            Snapser.Client.ApiResponse<StorageGetBlobResponse> localVarResponse = GetBlobWithHttpInfo(ownerId, accessType, blobKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Retrieve the blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageGetBlobResponse> GetBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->GetBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->GetBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->GetBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->GetBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageGetBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Retrieve the blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageGetBlobResponse> GetBlobAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetBlobWithHttpInfoAsync(ownerId, accessType, blobKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageGetBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageGetBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Retrieve the blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageGetBlobResponse>> GetBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->GetBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->GetBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->GetBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->GetBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageGetBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cas Retrieve the cas for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetCasResponse</returns>
        public StorageGetCasResponse GetCas(string ownerId, string accessType, string blobKey, string token)
        {
            Snapser.Client.ApiResponse<StorageGetCasResponse> localVarResponse = GetCasWithHttpInfo(ownerId, accessType, blobKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cas Retrieve the cas for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetCasResponse</returns>
        public Snapser.Client.ApiResponse<StorageGetCasResponse> GetCasWithHttpInfo(string ownerId, string accessType, string blobKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->GetCas");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->GetCas");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->GetCas");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->GetCas");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageGetCasResponse>("/v1/storage/owner/{owner_id}/{access_type}/cas/{blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cas Retrieve the cas for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetCasResponse</returns>
        public async System.Threading.Tasks.Task<StorageGetCasResponse> GetCasAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetCasWithHttpInfoAsync(ownerId, accessType, blobKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageGetCasResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageGetCasResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cas Retrieve the cas for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetCasResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageGetCasResponse>> GetCasWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->GetCas");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->GetCas");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->GetCas");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->GetCas");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageGetCasResponse>("/v1/storage/owner/{owner_id}/{access_type}/cas/{blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Retrieve a counter value
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetCounterResponse</returns>
        public StorageGetCounterResponse GetCounter(string ownerId, string accessType, string counterKey, string token)
        {
            Snapser.Client.ApiResponse<StorageGetCounterResponse> localVarResponse = GetCounterWithHttpInfo(ownerId, accessType, counterKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Retrieve a counter value
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetCounterResponse</returns>
        public Snapser.Client.ApiResponse<StorageGetCounterResponse> GetCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->GetCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->GetCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->GetCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->GetCounter");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageGetCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Retrieve a counter value
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetCounterResponse</returns>
        public async System.Threading.Tasks.Task<StorageGetCounterResponse> GetCounterAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetCounterWithHttpInfoAsync(ownerId, accessType, counterKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageGetCounterResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageGetCounterResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Retrieve a counter value
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetCounterResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageGetCounterResponse>> GetCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->GetCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->GetCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->GetCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->GetCounter");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageGetCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Increment the counter
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageIncrementCounterResponse</returns>
        public StorageIncrementCounterResponse IncrementCounter(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body)
        {
            Snapser.Client.ApiResponse<StorageIncrementCounterResponse> localVarResponse = IncrementCounterWithHttpInfo(ownerId, accessType, counterKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Increment the counter
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageIncrementCounterResponse</returns>
        public Snapser.Client.ApiResponse<StorageIncrementCounterResponse> IncrementCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->IncrementCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->IncrementCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->IncrementCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->IncrementCounter");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->IncrementCounter");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageIncrementCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncrementCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Increment the counter
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageIncrementCounterResponse</returns>
        public async System.Threading.Tasks.Task<StorageIncrementCounterResponse> IncrementCounterAsync(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = IncrementCounterWithHttpInfoAsync(ownerId, accessType, counterKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageIncrementCounterResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageIncrementCounterResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Increment the counter
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageIncrementCounterResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageIncrementCounterResponse>> IncrementCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->IncrementCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->IncrementCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->IncrementCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->IncrementCounter");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->IncrementCounter");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageIncrementCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncrementCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Inserts a blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageInsertBlobResponse</returns>
        public StorageInsertBlobResponse InsertBlob(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageInsertBlobResponse> localVarResponse = InsertBlobWithHttpInfo(ownerId, accessType, blobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Inserts a blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageInsertBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageInsertBlobResponse> InsertBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->InsertBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->InsertBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->InsertBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->InsertBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->InsertBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StorageInsertBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Inserts a blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageInsertBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageInsertBlobResponse> InsertBlobAsync(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = InsertBlobWithHttpInfoAsync(ownerId, accessType, blobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageInsertBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageInsertBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Inserts a blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageInsertBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageInsertBlobResponse>> InsertBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->InsertBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->InsertBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->InsertBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->InsertBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->InsertBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<StorageInsertBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InsertBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageReplaceBlobResponse</returns>
        public StorageReplaceBlobResponse ReplaceBlob(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageReplaceBlobResponse> localVarResponse = ReplaceBlobWithHttpInfo(ownerId, accessType, blobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageReplaceBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageReplaceBlobResponse> ReplaceBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->ReplaceBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->ReplaceBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->ReplaceBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->ReplaceBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->ReplaceBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageReplaceBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageReplaceBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageReplaceBlobResponse> ReplaceBlobAsync(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ReplaceBlobWithHttpInfoAsync(ownerId, accessType, blobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageReplaceBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageReplaceBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageReplaceBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageReplaceBlobResponse>> ReplaceBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->ReplaceBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->ReplaceBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->ReplaceBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->ReplaceBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->ReplaceBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageReplaceBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Reset a counter value to 0
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageResetCounterResponse</returns>
        public StorageResetCounterResponse ResetCounter(string ownerId, string accessType, string counterKey, string token)
        {
            Snapser.Client.ApiResponse<StorageResetCounterResponse> localVarResponse = ResetCounterWithHttpInfo(ownerId, accessType, counterKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Reset a counter value to 0
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageResetCounterResponse</returns>
        public Snapser.Client.ApiResponse<StorageResetCounterResponse> ResetCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->ResetCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->ResetCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->ResetCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->ResetCounter");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<StorageResetCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Reset a counter value to 0
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageResetCounterResponse</returns>
        public async System.Threading.Tasks.Task<StorageResetCounterResponse> ResetCounterAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ResetCounterWithHttpInfoAsync(ownerId, accessType, counterKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageResetCounterResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageResetCounterResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Reset a counter value to 0
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageResetCounterResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageResetCounterResponse>> ResetCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->ResetCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->ResetCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->ResetCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->ResetCounter");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<StorageResetCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageUpdateAppendBlobResponse</returns>
        public StorageUpdateAppendBlobResponse UpdateAppendBlob(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageUpdateAppendBlobResponse> localVarResponse = UpdateAppendBlobWithHttpInfo(ownerId, accessType, appendBlobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageUpdateAppendBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageUpdateAppendBlobResponse> UpdateAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->UpdateAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->UpdateAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->UpdateAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->UpdateAppendBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->UpdateAppendBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageUpdateAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageUpdateAppendBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageUpdateAppendBlobResponse> UpdateAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = UpdateAppendBlobWithHttpInfoAsync(ownerId, accessType, appendBlobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageUpdateAppendBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageUpdateAppendBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageUpdateAppendBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageUpdateAppendBlobResponse>> UpdateAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->UpdateAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->UpdateAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->UpdateAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->UpdateAppendBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->UpdateAppendBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageUpdateAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
