/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Snapser.Client;
using Snapser.Model;

namespace Snapser.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Append to an array sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageAppendArrSubDocumentResponse</returns>
        StorageAppendArrSubDocumentResponse StorageAppendArrSubDocument(string ownerId, string accessType, string jsonBlobKey, string token, AppendArrSubDocumentRequest body);

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Append to an array sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageAppendArrSubDocumentResponse</returns>
        ApiResponse<StorageAppendArrSubDocumentResponse> StorageAppendArrSubDocumentWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, AppendArrSubDocumentRequest body);
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteAppendBlobResponse</returns>
        StorageDeleteAppendBlobResponse StorageDeleteAppendBlob(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string));

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteAppendBlobResponse</returns>
        ApiResponse<StorageDeleteAppendBlobResponse> StorageDeleteAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string));
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Delete a blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteBlobResponse</returns>
        StorageDeleteBlobResponse StorageDeleteBlob(string ownerId, string accessType, string blobKey, string token, string cas = default(string));

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Delete a blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteBlobResponse</returns>
        ApiResponse<StorageDeleteBlobResponse> StorageDeleteBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, string cas = default(string));
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the JSON blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteJsonBlobResponse</returns>
        StorageDeleteJsonBlobResponse StorageDeleteJsonBlob(string ownerId, string accessType, string jsonBlobKey, string token, string cas = default(string));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the JSON blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteJsonBlobResponse</returns>
        ApiResponse<StorageDeleteJsonBlobResponse> StorageDeleteJsonBlobWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, string cas = default(string));
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteSubDocumentResponse</returns>
        StorageDeleteSubDocumentResponse StorageDeleteSubDocument(string ownerId, string accessType, string jsonBlobKey, string path, string token, string cas = default(string));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteSubDocumentResponse</returns>
        ApiResponse<StorageDeleteSubDocumentResponse> StorageDeleteSubDocumentWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string path, string token, string cas = default(string));
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the value of an append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetAppendBlobResponse</returns>
        StorageGetAppendBlobResponse StorageGetAppendBlob(string ownerId, string accessType, string appendBlobKey, string token);

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the value of an append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetAppendBlobResponse</returns>
        ApiResponse<StorageGetAppendBlobResponse> StorageGetAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token);
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetBlobResponse</returns>
        StorageGetBlobResponse StorageGetBlob(string ownerId, string accessType, string blobKey, string token);

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetBlobResponse</returns>
        ApiResponse<StorageGetBlobResponse> StorageGetBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token);
        /// <summary>
        /// Cas
        /// </summary>
        /// <remarks>
        /// Retrieve the cas for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetCasResponse</returns>
        StorageGetCasResponse StorageGetCas(string ownerId, string accessType, string blobKey, string token);

        /// <summary>
        /// Cas
        /// </summary>
        /// <remarks>
        /// Retrieve the cas for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetCasResponse</returns>
        ApiResponse<StorageGetCasResponse> StorageGetCasWithHttpInfo(string ownerId, string accessType, string blobKey, string token);
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Retrieve a counter value
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetCounterResponse</returns>
        StorageGetCounterResponse StorageGetCounter(string ownerId, string accessType, string counterKey, string token);

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Retrieve a counter value
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetCounterResponse</returns>
        ApiResponse<StorageGetCounterResponse> StorageGetCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token);
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the JSON blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetJsonBlobResponse</returns>
        StorageGetJsonBlobResponse StorageGetJsonBlob(string ownerId, string accessType, string jsonBlobKey, string token);

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the JSON blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetJsonBlobResponse</returns>
        ApiResponse<StorageGetJsonBlobResponse> StorageGetJsonBlobWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token);
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the sub-document for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetSubDocumentResponse</returns>
        StorageGetSubDocumentResponse StorageGetSubDocument(string ownerId, string accessType, string jsonBlobKey, string path, string token);

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the sub-document for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetSubDocumentResponse</returns>
        ApiResponse<StorageGetSubDocumentResponse> StorageGetSubDocumentWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string path, string token);
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Increment the counter
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageIncrementCounterResponse</returns>
        StorageIncrementCounterResponse StorageIncrementCounter(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body);

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Increment the counter
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageIncrementCounterResponse</returns>
        ApiResponse<StorageIncrementCounterResponse> StorageIncrementCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body);
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageInsertBlobResponse</returns>
        StorageInsertBlobResponse StorageInsertBlob(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body);

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageInsertBlobResponse</returns>
        ApiResponse<StorageInsertBlobResponse> StorageInsertBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body);
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a JSON blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageInsertJsonBlobResponse</returns>
        StorageInsertJsonBlobResponse StorageInsertJsonBlob(string ownerId, string accessType, string jsonBlobKey, string token, InsertJsonBlobRequest body);

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a JSON blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageInsertJsonBlobResponse</returns>
        ApiResponse<StorageInsertJsonBlobResponse> StorageInsertJsonBlobWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, InsertJsonBlobRequest body);
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Prepend to an array sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StoragePrependArrSubDocumentResponse</returns>
        StoragePrependArrSubDocumentResponse StoragePrependArrSubDocument(string ownerId, string accessType, string jsonBlobKey, string token, PrependArrSubDocumentRequest body);

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Prepend to an array sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StoragePrependArrSubDocumentResponse</returns>
        ApiResponse<StoragePrependArrSubDocumentResponse> StoragePrependArrSubDocumentWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, PrependArrSubDocumentRequest body);
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageReplaceBlobResponse</returns>
        StorageReplaceBlobResponse StorageReplaceBlob(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body);

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageReplaceBlobResponse</returns>
        ApiResponse<StorageReplaceBlobResponse> StorageReplaceBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body);
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Replace a JSON blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageReplaceJsonBlobResponse</returns>
        StorageReplaceJsonBlobResponse StorageReplaceJsonBlob(string ownerId, string accessType, string jsonBlobKey, string token, ReplaceJsonBlobRequest body);

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Replace a JSON blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageReplaceJsonBlobResponse</returns>
        ApiResponse<StorageReplaceJsonBlobResponse> StorageReplaceJsonBlobWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, ReplaceJsonBlobRequest body);
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Reset a counter value to 0
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageResetCounterResponse</returns>
        StorageResetCounterResponse StorageResetCounter(string ownerId, string accessType, string counterKey, string token);

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Reset a counter value to 0
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageResetCounterResponse</returns>
        ApiResponse<StorageResetCounterResponse> StorageResetCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token);
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageUpdateAppendBlobResponse</returns>
        StorageUpdateAppendBlobResponse StorageUpdateAppendBlob(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body);

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageUpdateAppendBlobResponse</returns>
        ApiResponse<StorageUpdateAppendBlobResponse> StorageUpdateAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body);
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Upsert a sub-document. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageUpsertSubDocumentResponse</returns>
        StorageUpsertSubDocumentResponse StorageUpsertSubDocument(string ownerId, string accessType, string jsonBlobKey, string token, UpsertSubDocumentRequest body);

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Upsert a sub-document. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageUpsertSubDocumentResponse</returns>
        ApiResponse<StorageUpsertSubDocumentResponse> StorageUpsertSubDocumentWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, UpsertSubDocumentRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Append to an array sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageAppendArrSubDocumentResponse</returns>
        System.Threading.Tasks.Task<StorageAppendArrSubDocumentResponse> StorageAppendArrSubDocumentAsync(string ownerId, string accessType, string jsonBlobKey, string token, AppendArrSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Append to an array sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageAppendArrSubDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageAppendArrSubDocumentResponse>> StorageAppendArrSubDocumentWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, AppendArrSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteAppendBlobResponse</returns>
        System.Threading.Tasks.Task<StorageDeleteAppendBlobResponse> StorageDeleteAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteAppendBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageDeleteAppendBlobResponse>> StorageDeleteAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Delete a blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteBlobResponse</returns>
        System.Threading.Tasks.Task<StorageDeleteBlobResponse> StorageDeleteBlobAsync(string ownerId, string accessType, string blobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Delete a blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageDeleteBlobResponse>> StorageDeleteBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the JSON blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteJsonBlobResponse</returns>
        System.Threading.Tasks.Task<StorageDeleteJsonBlobResponse> StorageDeleteJsonBlobAsync(string ownerId, string accessType, string jsonBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the JSON blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteJsonBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageDeleteJsonBlobResponse>> StorageDeleteJsonBlobWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteSubDocumentResponse</returns>
        System.Threading.Tasks.Task<StorageDeleteSubDocumentResponse> StorageDeleteSubDocumentAsync(string ownerId, string accessType, string jsonBlobKey, string path, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Deletes the sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteSubDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageDeleteSubDocumentResponse>> StorageDeleteSubDocumentWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string path, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the value of an append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetAppendBlobResponse</returns>
        System.Threading.Tasks.Task<StorageGetAppendBlobResponse> StorageGetAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the value of an append blob
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetAppendBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageGetAppendBlobResponse>> StorageGetAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetBlobResponse</returns>
        System.Threading.Tasks.Task<StorageGetBlobResponse> StorageGetBlobAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageGetBlobResponse>> StorageGetBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cas
        /// </summary>
        /// <remarks>
        /// Retrieve the cas for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetCasResponse</returns>
        System.Threading.Tasks.Task<StorageGetCasResponse> StorageGetCasAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cas
        /// </summary>
        /// <remarks>
        /// Retrieve the cas for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetCasResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageGetCasResponse>> StorageGetCasWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Retrieve a counter value
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetCounterResponse</returns>
        System.Threading.Tasks.Task<StorageGetCounterResponse> StorageGetCounterAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Retrieve a counter value
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetCounterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageGetCounterResponse>> StorageGetCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the JSON blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetJsonBlobResponse</returns>
        System.Threading.Tasks.Task<StorageGetJsonBlobResponse> StorageGetJsonBlobAsync(string ownerId, string accessType, string jsonBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the JSON blob for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetJsonBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageGetJsonBlobResponse>> StorageGetJsonBlobWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the sub-document for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetSubDocumentResponse</returns>
        System.Threading.Tasks.Task<StorageGetSubDocumentResponse> StorageGetSubDocumentAsync(string ownerId, string accessType, string jsonBlobKey, string path, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Retrieve the sub-document for the key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetSubDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageGetSubDocumentResponse>> StorageGetSubDocumentWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string path, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Increment the counter
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageIncrementCounterResponse</returns>
        System.Threading.Tasks.Task<StorageIncrementCounterResponse> StorageIncrementCounterAsync(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Increment the counter
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageIncrementCounterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageIncrementCounterResponse>> StorageIncrementCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageInsertBlobResponse</returns>
        System.Threading.Tasks.Task<StorageInsertBlobResponse> StorageInsertBlobAsync(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageInsertBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageInsertBlobResponse>> StorageInsertBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a JSON blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageInsertJsonBlobResponse</returns>
        System.Threading.Tasks.Task<StorageInsertJsonBlobResponse> StorageInsertJsonBlobAsync(string ownerId, string accessType, string jsonBlobKey, string token, InsertJsonBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Inserts a JSON blob. Will fail if the key already exists
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageInsertJsonBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageInsertJsonBlobResponse>> StorageInsertJsonBlobWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, InsertJsonBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Prepend to an array sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StoragePrependArrSubDocumentResponse</returns>
        System.Threading.Tasks.Task<StoragePrependArrSubDocumentResponse> StoragePrependArrSubDocumentAsync(string ownerId, string accessType, string jsonBlobKey, string token, PrependArrSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Prepend to an array sub-document
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StoragePrependArrSubDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StoragePrependArrSubDocumentResponse>> StoragePrependArrSubDocumentWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, PrependArrSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageReplaceBlobResponse</returns>
        System.Threading.Tasks.Task<StorageReplaceBlobResponse> StorageReplaceBlobAsync(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Blobs
        /// </summary>
        /// <remarks>
        /// Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageReplaceBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageReplaceBlobResponse>> StorageReplaceBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Replace a JSON blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageReplaceJsonBlobResponse</returns>
        System.Threading.Tasks.Task<StorageReplaceJsonBlobResponse> StorageReplaceJsonBlobAsync(string ownerId, string accessType, string jsonBlobKey, string token, ReplaceJsonBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Replace a JSON blob. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageReplaceJsonBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageReplaceJsonBlobResponse>> StorageReplaceJsonBlobWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, ReplaceJsonBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Reset a counter value to 0
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageResetCounterResponse</returns>
        System.Threading.Tasks.Task<StorageResetCounterResponse> StorageResetCounterAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Counters
        /// </summary>
        /// <remarks>
        /// Reset a counter value to 0
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageResetCounterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageResetCounterResponse>> StorageResetCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageUpdateAppendBlobResponse</returns>
        System.Threading.Tasks.Task<StorageUpdateAppendBlobResponse> StorageUpdateAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Append Blobs
        /// </summary>
        /// <remarks>
        /// Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageUpdateAppendBlobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageUpdateAppendBlobResponse>> StorageUpdateAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Upsert a sub-document. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageUpsertSubDocumentResponse</returns>
        System.Threading.Tasks.Task<StorageUpsertSubDocumentResponse> StorageUpsertSubDocumentAsync(string ownerId, string accessType, string jsonBlobKey, string token, UpsertSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// JSON Blobs
        /// </summary>
        /// <remarks>
        /// Upsert a sub-document. Optionally insert if it doesn&#39;t exist
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageUpsertSubDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StorageUpsertSubDocumentResponse>> StorageUpsertSubDocumentWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, UpsertSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageServiceApi : IStorageServiceApiSync, IStorageServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StorageServiceApi : IDisposable, IStorageServiceApi
    {
        private Snapser.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public StorageServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public StorageServiceApi(string basePath)
        {
            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public StorageServiceApi(Snapser.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public StorageServiceApi(Snapser.Client.ISynchronousClient client, Snapser.Client.IAsynchronousClient asyncClient, Snapser.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Snapser.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Snapser.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Snapser.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Snapser.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Snapser.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// JSON Blobs Append to an array sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageAppendArrSubDocumentResponse</returns>
        public StorageAppendArrSubDocumentResponse StorageAppendArrSubDocument(string ownerId, string accessType, string jsonBlobKey, string token, AppendArrSubDocumentRequest body)
        {
            Snapser.Client.ApiResponse<StorageAppendArrSubDocumentResponse> localVarResponse = StorageAppendArrSubDocumentWithHttpInfo(ownerId, accessType, jsonBlobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Append to an array sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageAppendArrSubDocumentResponse</returns>
        public Snapser.Client.ApiResponse<StorageAppendArrSubDocumentResponse> StorageAppendArrSubDocumentWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, AppendArrSubDocumentRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageAppendArrSubDocument");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageAppendArrSubDocument");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageAppendArrSubDocument");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageAppendArrSubDocument");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageAppendArrSubDocument");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageAppendArrSubDocumentResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}/sub-documents:append", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageAppendArrSubDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Append to an array sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageAppendArrSubDocumentResponse</returns>
        public async System.Threading.Tasks.Task<StorageAppendArrSubDocumentResponse> StorageAppendArrSubDocumentAsync(string ownerId, string accessType, string jsonBlobKey, string token, AppendArrSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageAppendArrSubDocumentWithHttpInfoAsync(ownerId, accessType, jsonBlobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageAppendArrSubDocumentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageAppendArrSubDocumentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Append to an array sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageAppendArrSubDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageAppendArrSubDocumentResponse>> StorageAppendArrSubDocumentWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, AppendArrSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageAppendArrSubDocument");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageAppendArrSubDocument");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageAppendArrSubDocument");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageAppendArrSubDocument");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageAppendArrSubDocument");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageAppendArrSubDocumentResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}/sub-documents:append", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageAppendArrSubDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Deletes the append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteAppendBlobResponse</returns>
        public StorageDeleteAppendBlobResponse StorageDeleteAppendBlob(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string))
        {
            Snapser.Client.ApiResponse<StorageDeleteAppendBlobResponse> localVarResponse = StorageDeleteAppendBlobWithHttpInfo(ownerId, accessType, appendBlobKey, token, cas);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Deletes the append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteAppendBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageDeleteAppendBlobResponse> StorageDeleteAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageDeleteAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageDeleteAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->StorageDeleteAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageDeleteAppendBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<StorageDeleteAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageDeleteAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Deletes the append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteAppendBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageDeleteAppendBlobResponse> StorageDeleteAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageDeleteAppendBlobWithHttpInfoAsync(ownerId, accessType, appendBlobKey, token, cas, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageDeleteAppendBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageDeleteAppendBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Deletes the append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteAppendBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageDeleteAppendBlobResponse>> StorageDeleteAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageDeleteAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageDeleteAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->StorageDeleteAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageDeleteAppendBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<StorageDeleteAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageDeleteAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Delete a blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteBlobResponse</returns>
        public StorageDeleteBlobResponse StorageDeleteBlob(string ownerId, string accessType, string blobKey, string token, string cas = default(string))
        {
            Snapser.Client.ApiResponse<StorageDeleteBlobResponse> localVarResponse = StorageDeleteBlobWithHttpInfo(ownerId, accessType, blobKey, token, cas);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Delete a blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageDeleteBlobResponse> StorageDeleteBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, string cas = default(string))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageDeleteBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageDeleteBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->StorageDeleteBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageDeleteBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<StorageDeleteBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageDeleteBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Delete a blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageDeleteBlobResponse> StorageDeleteBlobAsync(string ownerId, string accessType, string blobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageDeleteBlobWithHttpInfoAsync(ownerId, accessType, blobKey, token, cas, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageDeleteBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageDeleteBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Delete a blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageDeleteBlobResponse>> StorageDeleteBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageDeleteBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageDeleteBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->StorageDeleteBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageDeleteBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<StorageDeleteBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageDeleteBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Deletes the JSON blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteJsonBlobResponse</returns>
        public StorageDeleteJsonBlobResponse StorageDeleteJsonBlob(string ownerId, string accessType, string jsonBlobKey, string token, string cas = default(string))
        {
            Snapser.Client.ApiResponse<StorageDeleteJsonBlobResponse> localVarResponse = StorageDeleteJsonBlobWithHttpInfo(ownerId, accessType, jsonBlobKey, token, cas);
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Deletes the JSON blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteJsonBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageDeleteJsonBlobResponse> StorageDeleteJsonBlobWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, string cas = default(string))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageDeleteJsonBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageDeleteJsonBlob");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageDeleteJsonBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageDeleteJsonBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<StorageDeleteJsonBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageDeleteJsonBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Deletes the JSON blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteJsonBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageDeleteJsonBlobResponse> StorageDeleteJsonBlobAsync(string ownerId, string accessType, string jsonBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageDeleteJsonBlobWithHttpInfoAsync(ownerId, accessType, jsonBlobKey, token, cas, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageDeleteJsonBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageDeleteJsonBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Deletes the JSON blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteJsonBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageDeleteJsonBlobResponse>> StorageDeleteJsonBlobWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageDeleteJsonBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageDeleteJsonBlob");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageDeleteJsonBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageDeleteJsonBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<StorageDeleteJsonBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageDeleteJsonBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Deletes the sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>StorageDeleteSubDocumentResponse</returns>
        public StorageDeleteSubDocumentResponse StorageDeleteSubDocument(string ownerId, string accessType, string jsonBlobKey, string path, string token, string cas = default(string))
        {
            Snapser.Client.ApiResponse<StorageDeleteSubDocumentResponse> localVarResponse = StorageDeleteSubDocumentWithHttpInfo(ownerId, accessType, jsonBlobKey, path, token, cas);
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Deletes the sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <returns>ApiResponse of StorageDeleteSubDocumentResponse</returns>
        public Snapser.Client.ApiResponse<StorageDeleteSubDocumentResponse> StorageDeleteSubDocumentWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string path, string token, string cas = default(string))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageDeleteSubDocument");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageDeleteSubDocument");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageDeleteSubDocument");

            // verify the required parameter 'path' is set
            if (path == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'path' when calling StorageServiceApi->StorageDeleteSubDocument");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageDeleteSubDocument");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("path", Snapser.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<StorageDeleteSubDocumentResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}/sub-documents/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageDeleteSubDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Deletes the sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageDeleteSubDocumentResponse</returns>
        public async System.Threading.Tasks.Task<StorageDeleteSubDocumentResponse> StorageDeleteSubDocumentAsync(string ownerId, string accessType, string jsonBlobKey, string path, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageDeleteSubDocumentWithHttpInfoAsync(ownerId, accessType, jsonBlobKey, path, token, cas, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageDeleteSubDocumentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageDeleteSubDocumentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Deletes the sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cas">Optional CAS value retrieved from the last operation. CAS mismatch will be ignored if not passed (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageDeleteSubDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageDeleteSubDocumentResponse>> StorageDeleteSubDocumentWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string path, string token, string cas = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageDeleteSubDocument");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageDeleteSubDocument");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageDeleteSubDocument");

            // verify the required parameter 'path' is set
            if (path == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'path' when calling StorageServiceApi->StorageDeleteSubDocument");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageDeleteSubDocument");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("path", Snapser.Client.ClientUtils.ParameterToString(path)); // path parameter
            if (cas != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "cas", cas));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<StorageDeleteSubDocumentResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}/sub-documents/{path}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageDeleteSubDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Retrieve the value of an append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetAppendBlobResponse</returns>
        public StorageGetAppendBlobResponse StorageGetAppendBlob(string ownerId, string accessType, string appendBlobKey, string token)
        {
            Snapser.Client.ApiResponse<StorageGetAppendBlobResponse> localVarResponse = StorageGetAppendBlobWithHttpInfo(ownerId, accessType, appendBlobKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Retrieve the value of an append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetAppendBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageGetAppendBlobResponse> StorageGetAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->StorageGetAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetAppendBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageGetAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Retrieve the value of an append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetAppendBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageGetAppendBlobResponse> StorageGetAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageGetAppendBlobWithHttpInfoAsync(ownerId, accessType, appendBlobKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageGetAppendBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageGetAppendBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Retrieve the value of an append blob
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetAppendBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageGetAppendBlobResponse>> StorageGetAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->StorageGetAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetAppendBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageGetAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Retrieve the blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetBlobResponse</returns>
        public StorageGetBlobResponse StorageGetBlob(string ownerId, string accessType, string blobKey, string token)
        {
            Snapser.Client.ApiResponse<StorageGetBlobResponse> localVarResponse = StorageGetBlobWithHttpInfo(ownerId, accessType, blobKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Retrieve the blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageGetBlobResponse> StorageGetBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->StorageGetBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageGetBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Retrieve the blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageGetBlobResponse> StorageGetBlobAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageGetBlobWithHttpInfoAsync(ownerId, accessType, blobKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageGetBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageGetBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Retrieve the blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageGetBlobResponse>> StorageGetBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->StorageGetBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageGetBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cas Retrieve the cas for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetCasResponse</returns>
        public StorageGetCasResponse StorageGetCas(string ownerId, string accessType, string blobKey, string token)
        {
            Snapser.Client.ApiResponse<StorageGetCasResponse> localVarResponse = StorageGetCasWithHttpInfo(ownerId, accessType, blobKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cas Retrieve the cas for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetCasResponse</returns>
        public Snapser.Client.ApiResponse<StorageGetCasResponse> StorageGetCasWithHttpInfo(string ownerId, string accessType, string blobKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetCas");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetCas");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->StorageGetCas");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetCas");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageGetCasResponse>("/v1/storage/owner/{owner_id}/{access_type}/cas/{blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetCas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cas Retrieve the cas for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetCasResponse</returns>
        public async System.Threading.Tasks.Task<StorageGetCasResponse> StorageGetCasAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageGetCasWithHttpInfoAsync(ownerId, accessType, blobKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageGetCasResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageGetCasResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cas Retrieve the cas for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetCasResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageGetCasResponse>> StorageGetCasWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetCas");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetCas");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->StorageGetCas");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetCas");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageGetCasResponse>("/v1/storage/owner/{owner_id}/{access_type}/cas/{blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetCas", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Retrieve a counter value
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetCounterResponse</returns>
        public StorageGetCounterResponse StorageGetCounter(string ownerId, string accessType, string counterKey, string token)
        {
            Snapser.Client.ApiResponse<StorageGetCounterResponse> localVarResponse = StorageGetCounterWithHttpInfo(ownerId, accessType, counterKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Retrieve a counter value
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetCounterResponse</returns>
        public Snapser.Client.ApiResponse<StorageGetCounterResponse> StorageGetCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->StorageGetCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetCounter");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageGetCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Retrieve a counter value
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetCounterResponse</returns>
        public async System.Threading.Tasks.Task<StorageGetCounterResponse> StorageGetCounterAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageGetCounterWithHttpInfoAsync(ownerId, accessType, counterKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageGetCounterResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageGetCounterResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Retrieve a counter value
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetCounterResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageGetCounterResponse>> StorageGetCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->StorageGetCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetCounter");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageGetCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Retrieve the JSON blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetJsonBlobResponse</returns>
        public StorageGetJsonBlobResponse StorageGetJsonBlob(string ownerId, string accessType, string jsonBlobKey, string token)
        {
            Snapser.Client.ApiResponse<StorageGetJsonBlobResponse> localVarResponse = StorageGetJsonBlobWithHttpInfo(ownerId, accessType, jsonBlobKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Retrieve the JSON blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetJsonBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageGetJsonBlobResponse> StorageGetJsonBlobWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetJsonBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetJsonBlob");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageGetJsonBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetJsonBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageGetJsonBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetJsonBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Retrieve the JSON blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetJsonBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageGetJsonBlobResponse> StorageGetJsonBlobAsync(string ownerId, string accessType, string jsonBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageGetJsonBlobWithHttpInfoAsync(ownerId, accessType, jsonBlobKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageGetJsonBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageGetJsonBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Retrieve the JSON blob for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetJsonBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageGetJsonBlobResponse>> StorageGetJsonBlobWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetJsonBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetJsonBlob");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageGetJsonBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetJsonBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageGetJsonBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetJsonBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Retrieve the sub-document for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageGetSubDocumentResponse</returns>
        public StorageGetSubDocumentResponse StorageGetSubDocument(string ownerId, string accessType, string jsonBlobKey, string path, string token)
        {
            Snapser.Client.ApiResponse<StorageGetSubDocumentResponse> localVarResponse = StorageGetSubDocumentWithHttpInfo(ownerId, accessType, jsonBlobKey, path, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Retrieve the sub-document for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageGetSubDocumentResponse</returns>
        public Snapser.Client.ApiResponse<StorageGetSubDocumentResponse> StorageGetSubDocumentWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string path, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetSubDocument");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetSubDocument");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageGetSubDocument");

            // verify the required parameter 'path' is set
            if (path == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'path' when calling StorageServiceApi->StorageGetSubDocument");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetSubDocument");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("path", Snapser.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StorageGetSubDocumentResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}/sub-documents/{path}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetSubDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Retrieve the sub-document for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageGetSubDocumentResponse</returns>
        public async System.Threading.Tasks.Task<StorageGetSubDocumentResponse> StorageGetSubDocumentAsync(string ownerId, string accessType, string jsonBlobKey, string path, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageGetSubDocumentWithHttpInfoAsync(ownerId, accessType, jsonBlobKey, path, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageGetSubDocumentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageGetSubDocumentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Retrieve the sub-document for the key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="path">Path to the sub-document</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageGetSubDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageGetSubDocumentResponse>> StorageGetSubDocumentWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string path, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageGetSubDocument");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageGetSubDocument");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageGetSubDocument");

            // verify the required parameter 'path' is set
            if (path == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'path' when calling StorageServiceApi->StorageGetSubDocument");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageGetSubDocument");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.PathParameters.Add("path", Snapser.Client.ClientUtils.ParameterToString(path)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<StorageGetSubDocumentResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}/sub-documents/{path}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageGetSubDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Increment the counter
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageIncrementCounterResponse</returns>
        public StorageIncrementCounterResponse StorageIncrementCounter(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body)
        {
            Snapser.Client.ApiResponse<StorageIncrementCounterResponse> localVarResponse = StorageIncrementCounterWithHttpInfo(ownerId, accessType, counterKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Increment the counter
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageIncrementCounterResponse</returns>
        public Snapser.Client.ApiResponse<StorageIncrementCounterResponse> StorageIncrementCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageIncrementCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageIncrementCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->StorageIncrementCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageIncrementCounter");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageIncrementCounter");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageIncrementCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageIncrementCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Increment the counter
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageIncrementCounterResponse</returns>
        public async System.Threading.Tasks.Task<StorageIncrementCounterResponse> StorageIncrementCounterAsync(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageIncrementCounterWithHttpInfoAsync(ownerId, accessType, counterKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageIncrementCounterResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageIncrementCounterResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Increment the counter
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageIncrementCounterResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageIncrementCounterResponse>> StorageIncrementCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, IncrementCounterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageIncrementCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageIncrementCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->StorageIncrementCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageIncrementCounter");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageIncrementCounter");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageIncrementCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageIncrementCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Inserts a blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageInsertBlobResponse</returns>
        public StorageInsertBlobResponse StorageInsertBlob(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageInsertBlobResponse> localVarResponse = StorageInsertBlobWithHttpInfo(ownerId, accessType, blobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Inserts a blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageInsertBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageInsertBlobResponse> StorageInsertBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageInsertBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageInsertBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->StorageInsertBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageInsertBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageInsertBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StorageInsertBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageInsertBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Inserts a blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageInsertBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageInsertBlobResponse> StorageInsertBlobAsync(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageInsertBlobWithHttpInfoAsync(ownerId, accessType, blobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageInsertBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageInsertBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Inserts a blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageInsertBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageInsertBlobResponse>> StorageInsertBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, InsertBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageInsertBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageInsertBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->StorageInsertBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageInsertBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageInsertBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<StorageInsertBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageInsertBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Inserts a JSON blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageInsertJsonBlobResponse</returns>
        public StorageInsertJsonBlobResponse StorageInsertJsonBlob(string ownerId, string accessType, string jsonBlobKey, string token, InsertJsonBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageInsertJsonBlobResponse> localVarResponse = StorageInsertJsonBlobWithHttpInfo(ownerId, accessType, jsonBlobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Inserts a JSON blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageInsertJsonBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageInsertJsonBlobResponse> StorageInsertJsonBlobWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, InsertJsonBlobRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageInsertJsonBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageInsertJsonBlob");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageInsertJsonBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageInsertJsonBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageInsertJsonBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StorageInsertJsonBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageInsertJsonBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Inserts a JSON blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageInsertJsonBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageInsertJsonBlobResponse> StorageInsertJsonBlobAsync(string ownerId, string accessType, string jsonBlobKey, string token, InsertJsonBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageInsertJsonBlobWithHttpInfoAsync(ownerId, accessType, jsonBlobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageInsertJsonBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageInsertJsonBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Inserts a JSON blob. Will fail if the key already exists
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageInsertJsonBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageInsertJsonBlobResponse>> StorageInsertJsonBlobWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, InsertJsonBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageInsertJsonBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageInsertJsonBlob");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageInsertJsonBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageInsertJsonBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageInsertJsonBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<StorageInsertJsonBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageInsertJsonBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Prepend to an array sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StoragePrependArrSubDocumentResponse</returns>
        public StoragePrependArrSubDocumentResponse StoragePrependArrSubDocument(string ownerId, string accessType, string jsonBlobKey, string token, PrependArrSubDocumentRequest body)
        {
            Snapser.Client.ApiResponse<StoragePrependArrSubDocumentResponse> localVarResponse = StoragePrependArrSubDocumentWithHttpInfo(ownerId, accessType, jsonBlobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Prepend to an array sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StoragePrependArrSubDocumentResponse</returns>
        public Snapser.Client.ApiResponse<StoragePrependArrSubDocumentResponse> StoragePrependArrSubDocumentWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, PrependArrSubDocumentRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StoragePrependArrSubDocument");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StoragePrependArrSubDocument");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StoragePrependArrSubDocument");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StoragePrependArrSubDocument");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StoragePrependArrSubDocument");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StoragePrependArrSubDocumentResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}/sub-documents:prepend", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoragePrependArrSubDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Prepend to an array sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StoragePrependArrSubDocumentResponse</returns>
        public async System.Threading.Tasks.Task<StoragePrependArrSubDocumentResponse> StoragePrependArrSubDocumentAsync(string ownerId, string accessType, string jsonBlobKey, string token, PrependArrSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StoragePrependArrSubDocumentWithHttpInfoAsync(ownerId, accessType, jsonBlobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StoragePrependArrSubDocumentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StoragePrependArrSubDocumentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Prepend to an array sub-document
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StoragePrependArrSubDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StoragePrependArrSubDocumentResponse>> StoragePrependArrSubDocumentWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, PrependArrSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StoragePrependArrSubDocument");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StoragePrependArrSubDocument");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StoragePrependArrSubDocument");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StoragePrependArrSubDocument");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StoragePrependArrSubDocument");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StoragePrependArrSubDocumentResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}/sub-documents:prepend", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StoragePrependArrSubDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageReplaceBlobResponse</returns>
        public StorageReplaceBlobResponse StorageReplaceBlob(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageReplaceBlobResponse> localVarResponse = StorageReplaceBlobWithHttpInfo(ownerId, accessType, blobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageReplaceBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageReplaceBlobResponse> StorageReplaceBlobWithHttpInfo(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageReplaceBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageReplaceBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->StorageReplaceBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageReplaceBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageReplaceBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageReplaceBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageReplaceBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Blobs Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageReplaceBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageReplaceBlobResponse> StorageReplaceBlobAsync(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageReplaceBlobWithHttpInfoAsync(ownerId, accessType, blobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageReplaceBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageReplaceBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Blobs Replace a blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="blobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageReplaceBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageReplaceBlobResponse>> StorageReplaceBlobWithHttpInfoAsync(string ownerId, string accessType, string blobKey, string token, ReplaceBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageReplaceBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageReplaceBlob");

            // verify the required parameter 'blobKey' is set
            if (blobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'blobKey' when calling StorageServiceApi->StorageReplaceBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageReplaceBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageReplaceBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("blob_key", Snapser.Client.ClientUtils.ParameterToString(blobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageReplaceBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/blobs/{blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageReplaceBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Replace a JSON blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageReplaceJsonBlobResponse</returns>
        public StorageReplaceJsonBlobResponse StorageReplaceJsonBlob(string ownerId, string accessType, string jsonBlobKey, string token, ReplaceJsonBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageReplaceJsonBlobResponse> localVarResponse = StorageReplaceJsonBlobWithHttpInfo(ownerId, accessType, jsonBlobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Replace a JSON blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageReplaceJsonBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageReplaceJsonBlobResponse> StorageReplaceJsonBlobWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, ReplaceJsonBlobRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageReplaceJsonBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageReplaceJsonBlob");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageReplaceJsonBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageReplaceJsonBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageReplaceJsonBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageReplaceJsonBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageReplaceJsonBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Replace a JSON blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageReplaceJsonBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageReplaceJsonBlobResponse> StorageReplaceJsonBlobAsync(string ownerId, string accessType, string jsonBlobKey, string token, ReplaceJsonBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageReplaceJsonBlobWithHttpInfoAsync(ownerId, accessType, jsonBlobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageReplaceJsonBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageReplaceJsonBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Replace a JSON blob. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the blob. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageReplaceJsonBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageReplaceJsonBlobResponse>> StorageReplaceJsonBlobWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, ReplaceJsonBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageReplaceJsonBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageReplaceJsonBlob");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageReplaceJsonBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageReplaceJsonBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageReplaceJsonBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageReplaceJsonBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageReplaceJsonBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Reset a counter value to 0
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>StorageResetCounterResponse</returns>
        public StorageResetCounterResponse StorageResetCounter(string ownerId, string accessType, string counterKey, string token)
        {
            Snapser.Client.ApiResponse<StorageResetCounterResponse> localVarResponse = StorageResetCounterWithHttpInfo(ownerId, accessType, counterKey, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Reset a counter value to 0
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StorageResetCounterResponse</returns>
        public Snapser.Client.ApiResponse<StorageResetCounterResponse> StorageResetCounterWithHttpInfo(string ownerId, string accessType, string counterKey, string token)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageResetCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageResetCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->StorageResetCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageResetCounter");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<StorageResetCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageResetCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Counters Reset a counter value to 0
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageResetCounterResponse</returns>
        public async System.Threading.Tasks.Task<StorageResetCounterResponse> StorageResetCounterAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageResetCounterWithHttpInfoAsync(ownerId, accessType, counterKey, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageResetCounterResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageResetCounterResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Counters Reset a counter value to 0
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="counterKey">Counter key</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageResetCounterResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageResetCounterResponse>> StorageResetCounterWithHttpInfoAsync(string ownerId, string accessType, string counterKey, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageResetCounter");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageResetCounter");

            // verify the required parameter 'counterKey' is set
            if (counterKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'counterKey' when calling StorageServiceApi->StorageResetCounter");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageResetCounter");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("counter_key", Snapser.Client.ClientUtils.ParameterToString(counterKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<StorageResetCounterResponse>("/v1/storage/owner/{owner_id}/{access_type}/counters/{counter_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageResetCounter", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageUpdateAppendBlobResponse</returns>
        public StorageUpdateAppendBlobResponse StorageUpdateAppendBlob(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body)
        {
            Snapser.Client.ApiResponse<StorageUpdateAppendBlobResponse> localVarResponse = StorageUpdateAppendBlobWithHttpInfo(ownerId, accessType, appendBlobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageUpdateAppendBlobResponse</returns>
        public Snapser.Client.ApiResponse<StorageUpdateAppendBlobResponse> StorageUpdateAppendBlobWithHttpInfo(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageUpdateAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageUpdateAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->StorageUpdateAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageUpdateAppendBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageUpdateAppendBlob");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageUpdateAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageUpdateAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Append Blobs Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageUpdateAppendBlobResponse</returns>
        public async System.Threading.Tasks.Task<StorageUpdateAppendBlobResponse> StorageUpdateAppendBlobAsync(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageUpdateAppendBlobWithHttpInfoAsync(ownerId, accessType, appendBlobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageUpdateAppendBlobResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageUpdateAppendBlobResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Append Blobs Apend to the existing blob. Create a new one if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Append-blob owner&#39;s user ID</param>
        /// <param name="accessType">Access to the append-blob. (public/protected/private)</param>
        /// <param name="appendBlobKey">Append-blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageUpdateAppendBlobResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageUpdateAppendBlobResponse>> StorageUpdateAppendBlobWithHttpInfoAsync(string ownerId, string accessType, string appendBlobKey, string token, UpdateAppendBlobRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageUpdateAppendBlob");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageUpdateAppendBlob");

            // verify the required parameter 'appendBlobKey' is set
            if (appendBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'appendBlobKey' when calling StorageServiceApi->StorageUpdateAppendBlob");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageUpdateAppendBlob");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageUpdateAppendBlob");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("append_blob_key", Snapser.Client.ClientUtils.ParameterToString(appendBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageUpdateAppendBlobResponse>("/v1/storage/owner/{owner_id}/{access_type}/append-blobs/{append_blob_key}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageUpdateAppendBlob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Upsert a sub-document. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StorageUpsertSubDocumentResponse</returns>
        public StorageUpsertSubDocumentResponse StorageUpsertSubDocument(string ownerId, string accessType, string jsonBlobKey, string token, UpsertSubDocumentRequest body)
        {
            Snapser.Client.ApiResponse<StorageUpsertSubDocumentResponse> localVarResponse = StorageUpsertSubDocumentWithHttpInfo(ownerId, accessType, jsonBlobKey, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Upsert a sub-document. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StorageUpsertSubDocumentResponse</returns>
        public Snapser.Client.ApiResponse<StorageUpsertSubDocumentResponse> StorageUpsertSubDocumentWithHttpInfo(string ownerId, string accessType, string jsonBlobKey, string token, UpsertSubDocumentRequest body)
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageUpsertSubDocument");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageUpsertSubDocument");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageUpsertSubDocument");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageUpsertSubDocument");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageUpsertSubDocument");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StorageUpsertSubDocumentResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}/sub-documents", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageUpsertSubDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// JSON Blobs Upsert a sub-document. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StorageUpsertSubDocumentResponse</returns>
        public async System.Threading.Tasks.Task<StorageUpsertSubDocumentResponse> StorageUpsertSubDocumentAsync(string ownerId, string accessType, string jsonBlobKey, string token, UpsertSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = StorageUpsertSubDocumentWithHttpInfoAsync(ownerId, accessType, jsonBlobKey, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<StorageUpsertSubDocumentResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<StorageUpsertSubDocumentResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// JSON Blobs Upsert a sub-document. Optionally insert if it doesn&#39;t exist
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ownerId">Counter owner&#39;s user ID</param>
        /// <param name="accessType">Access to the counter. (public/protected/private)</param>
        /// <param name="jsonBlobKey">Blob key</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StorageUpsertSubDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StorageUpsertSubDocumentResponse>> StorageUpsertSubDocumentWithHttpInfoAsync(string ownerId, string accessType, string jsonBlobKey, string token, UpsertSubDocumentRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'ownerId' when calling StorageServiceApi->StorageUpsertSubDocument");

            // verify the required parameter 'accessType' is set
            if (accessType == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'accessType' when calling StorageServiceApi->StorageUpsertSubDocument");

            // verify the required parameter 'jsonBlobKey' is set
            if (jsonBlobKey == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'jsonBlobKey' when calling StorageServiceApi->StorageUpsertSubDocument");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StorageServiceApi->StorageUpsertSubDocument");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StorageServiceApi->StorageUpsertSubDocument");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("owner_id", Snapser.Client.ClientUtils.ParameterToString(ownerId)); // path parameter
            localVarRequestOptions.PathParameters.Add("access_type", Snapser.Client.ClientUtils.ParameterToString(accessType)); // path parameter
            localVarRequestOptions.PathParameters.Add("json_blob_key", Snapser.Client.ClientUtils.ParameterToString(jsonBlobKey)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<StorageUpsertSubDocumentResponse>("/v1/storage/owner/{owner_id}/{access_type}/json-blobs/{json_blob_key}/sub-documents", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageUpsertSubDocument", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
