/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Snapser.Client;
using Snapser.Model;

namespace Snapser.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeaderboardsServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Standings
        /// </summary>
        /// <remarks>
        /// Gets the standings within a leaderboard
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="range">Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified</param>
        /// <param name="count">Number of rankings to be displayed</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">Optional user ID for the user who&#39;s standing is requested (optional)</param>
        /// <param name="offset">For recurring leaderboards, the offset from the latest occurrence of the leaderboard (optional)</param>
        /// <param name="withMetadata">Whether the user metadata should be included with the request (optional)</param>
        /// <returns>LeaderboardsGetScoresResponse</returns>
        LeaderboardsGetScoresResponse LeaderboardsGetScores(string leaderboardName, string range, long count, string token, string userId = default(string), int? offset = default(int?), bool? withMetadata = default(bool?));

        /// <summary>
        /// Standings
        /// </summary>
        /// <remarks>
        /// Gets the standings within a leaderboard
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="range">Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified</param>
        /// <param name="count">Number of rankings to be displayed</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">Optional user ID for the user who&#39;s standing is requested (optional)</param>
        /// <param name="offset">For recurring leaderboards, the offset from the latest occurrence of the leaderboard (optional)</param>
        /// <param name="withMetadata">Whether the user metadata should be included with the request (optional)</param>
        /// <returns>ApiResponse of LeaderboardsGetScoresResponse</returns>
        ApiResponse<LeaderboardsGetScoresResponse> LeaderboardsGetScoresWithHttpInfo(string leaderboardName, string range, long count, string token, string userId = default(string), int? offset = default(int?), bool? withMetadata = default(bool?));
        /// <summary>
        /// Score
        /// </summary>
        /// <remarks>
        /// Increments the leaderboard score for the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>LeaderboardsIncrementScoreResponse</returns>
        LeaderboardsIncrementScoreResponse LeaderboardsIncrementScore(string leaderboardName, string userId, string token, IncrementScoreRequest body);

        /// <summary>
        /// Score
        /// </summary>
        /// <remarks>
        /// Increments the leaderboard score for the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LeaderboardsIncrementScoreResponse</returns>
        ApiResponse<LeaderboardsIncrementScoreResponse> LeaderboardsIncrementScoreWithHttpInfo(string leaderboardName, string userId, string token, IncrementScoreRequest body);
        /// <summary>
        /// Score
        /// </summary>
        /// <remarks>
        /// Updates the leaderboard score for the user (only non &#39;counter&#39; leaderboards)
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>LeaderboardsSetScoreResponse</returns>
        LeaderboardsSetScoreResponse LeaderboardsSetScore(string leaderboardName, string userId, string token, SetScoreRequest body);

        /// <summary>
        /// Score
        /// </summary>
        /// <remarks>
        /// Updates the leaderboard score for the user (only non &#39;counter&#39; leaderboards)
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LeaderboardsSetScoreResponse</returns>
        ApiResponse<LeaderboardsSetScoreResponse> LeaderboardsSetScoreWithHttpInfo(string leaderboardName, string userId, string token, SetScoreRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeaderboardsServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Standings
        /// </summary>
        /// <remarks>
        /// Gets the standings within a leaderboard
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="range">Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified</param>
        /// <param name="count">Number of rankings to be displayed</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">Optional user ID for the user who&#39;s standing is requested (optional)</param>
        /// <param name="offset">For recurring leaderboards, the offset from the latest occurrence of the leaderboard (optional)</param>
        /// <param name="withMetadata">Whether the user metadata should be included with the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeaderboardsGetScoresResponse</returns>
        System.Threading.Tasks.Task<LeaderboardsGetScoresResponse> LeaderboardsGetScoresAsync(string leaderboardName, string range, long count, string token, string userId = default(string), int? offset = default(int?), bool? withMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Standings
        /// </summary>
        /// <remarks>
        /// Gets the standings within a leaderboard
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="range">Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified</param>
        /// <param name="count">Number of rankings to be displayed</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">Optional user ID for the user who&#39;s standing is requested (optional)</param>
        /// <param name="offset">For recurring leaderboards, the offset from the latest occurrence of the leaderboard (optional)</param>
        /// <param name="withMetadata">Whether the user metadata should be included with the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeaderboardsGetScoresResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaderboardsGetScoresResponse>> LeaderboardsGetScoresWithHttpInfoAsync(string leaderboardName, string range, long count, string token, string userId = default(string), int? offset = default(int?), bool? withMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Score
        /// </summary>
        /// <remarks>
        /// Increments the leaderboard score for the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeaderboardsIncrementScoreResponse</returns>
        System.Threading.Tasks.Task<LeaderboardsIncrementScoreResponse> LeaderboardsIncrementScoreAsync(string leaderboardName, string userId, string token, IncrementScoreRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Score
        /// </summary>
        /// <remarks>
        /// Increments the leaderboard score for the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeaderboardsIncrementScoreResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaderboardsIncrementScoreResponse>> LeaderboardsIncrementScoreWithHttpInfoAsync(string leaderboardName, string userId, string token, IncrementScoreRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Score
        /// </summary>
        /// <remarks>
        /// Updates the leaderboard score for the user (only non &#39;counter&#39; leaderboards)
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeaderboardsSetScoreResponse</returns>
        System.Threading.Tasks.Task<LeaderboardsSetScoreResponse> LeaderboardsSetScoreAsync(string leaderboardName, string userId, string token, SetScoreRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Score
        /// </summary>
        /// <remarks>
        /// Updates the leaderboard score for the user (only non &#39;counter&#39; leaderboards)
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeaderboardsSetScoreResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeaderboardsSetScoreResponse>> LeaderboardsSetScoreWithHttpInfoAsync(string leaderboardName, string userId, string token, SetScoreRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeaderboardsServiceApi : ILeaderboardsServiceApiSync, ILeaderboardsServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LeaderboardsServiceApi : IDisposable, ILeaderboardsServiceApi
    {
        private Snapser.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public LeaderboardsServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public LeaderboardsServiceApi(string basePath)
        {
            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public LeaderboardsServiceApi(Snapser.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public LeaderboardsServiceApi(Snapser.Client.ISynchronousClient client, Snapser.Client.IAsynchronousClient asyncClient, Snapser.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Snapser.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Snapser.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Snapser.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Snapser.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Snapser.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Standings Gets the standings within a leaderboard
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="range">Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified</param>
        /// <param name="count">Number of rankings to be displayed</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">Optional user ID for the user who&#39;s standing is requested (optional)</param>
        /// <param name="offset">For recurring leaderboards, the offset from the latest occurrence of the leaderboard (optional)</param>
        /// <param name="withMetadata">Whether the user metadata should be included with the request (optional)</param>
        /// <returns>LeaderboardsGetScoresResponse</returns>
        public LeaderboardsGetScoresResponse LeaderboardsGetScores(string leaderboardName, string range, long count, string token, string userId = default(string), int? offset = default(int?), bool? withMetadata = default(bool?))
        {
            Snapser.Client.ApiResponse<LeaderboardsGetScoresResponse> localVarResponse = LeaderboardsGetScoresWithHttpInfo(leaderboardName, range, count, token, userId, offset, withMetadata);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Standings Gets the standings within a leaderboard
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="range">Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified</param>
        /// <param name="count">Number of rankings to be displayed</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">Optional user ID for the user who&#39;s standing is requested (optional)</param>
        /// <param name="offset">For recurring leaderboards, the offset from the latest occurrence of the leaderboard (optional)</param>
        /// <param name="withMetadata">Whether the user metadata should be included with the request (optional)</param>
        /// <returns>ApiResponse of LeaderboardsGetScoresResponse</returns>
        public Snapser.Client.ApiResponse<LeaderboardsGetScoresResponse> LeaderboardsGetScoresWithHttpInfo(string leaderboardName, string range, long count, string token, string userId = default(string), int? offset = default(int?), bool? withMetadata = default(bool?))
        {
            // verify the required parameter 'leaderboardName' is set
            if (leaderboardName == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'leaderboardName' when calling LeaderboardsServiceApi->LeaderboardsGetScores");

            // verify the required parameter 'range' is set
            if (range == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'range' when calling LeaderboardsServiceApi->LeaderboardsGetScores");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling LeaderboardsServiceApi->LeaderboardsGetScores");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboard_name", Snapser.Client.ClientUtils.ParameterToString(leaderboardName)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (withMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "with_metadata", withMetadata));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<LeaderboardsGetScoresResponse>("/v1/leaderboards/leaderboards/{leaderboard_name}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaderboardsGetScores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Standings Gets the standings within a leaderboard
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="range">Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified</param>
        /// <param name="count">Number of rankings to be displayed</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">Optional user ID for the user who&#39;s standing is requested (optional)</param>
        /// <param name="offset">For recurring leaderboards, the offset from the latest occurrence of the leaderboard (optional)</param>
        /// <param name="withMetadata">Whether the user metadata should be included with the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeaderboardsGetScoresResponse</returns>
        public async System.Threading.Tasks.Task<LeaderboardsGetScoresResponse> LeaderboardsGetScoresAsync(string leaderboardName, string range, long count, string token, string userId = default(string), int? offset = default(int?), bool? withMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = LeaderboardsGetScoresWithHttpInfoAsync(leaderboardName, range, count, token, userId, offset, withMetadata, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<LeaderboardsGetScoresResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<LeaderboardsGetScoresResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Standings Gets the standings within a leaderboard
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="range">Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified</param>
        /// <param name="count">Number of rankings to be displayed</param>
        /// <param name="token">User session token</param>
        /// <param name="userId">Optional user ID for the user who&#39;s standing is requested (optional)</param>
        /// <param name="offset">For recurring leaderboards, the offset from the latest occurrence of the leaderboard (optional)</param>
        /// <param name="withMetadata">Whether the user metadata should be included with the request (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeaderboardsGetScoresResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<LeaderboardsGetScoresResponse>> LeaderboardsGetScoresWithHttpInfoAsync(string leaderboardName, string range, long count, string token, string userId = default(string), int? offset = default(int?), bool? withMetadata = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leaderboardName' is set
            if (leaderboardName == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'leaderboardName' when calling LeaderboardsServiceApi->LeaderboardsGetScores");

            // verify the required parameter 'range' is set
            if (range == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'range' when calling LeaderboardsServiceApi->LeaderboardsGetScores");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling LeaderboardsServiceApi->LeaderboardsGetScores");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboard_name", Snapser.Client.ClientUtils.ParameterToString(leaderboardName)); // path parameter
            if (userId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "user_id", userId));
            }
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "range", range));
            localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (withMetadata != null)
            {
                localVarRequestOptions.QueryParameters.Add(Snapser.Client.ClientUtils.ParameterToMultiMap("", "with_metadata", withMetadata));
            }
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<LeaderboardsGetScoresResponse>("/v1/leaderboards/leaderboards/{leaderboard_name}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaderboardsGetScores", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Score Increments the leaderboard score for the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>LeaderboardsIncrementScoreResponse</returns>
        public LeaderboardsIncrementScoreResponse LeaderboardsIncrementScore(string leaderboardName, string userId, string token, IncrementScoreRequest body)
        {
            Snapser.Client.ApiResponse<LeaderboardsIncrementScoreResponse> localVarResponse = LeaderboardsIncrementScoreWithHttpInfo(leaderboardName, userId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Score Increments the leaderboard score for the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LeaderboardsIncrementScoreResponse</returns>
        public Snapser.Client.ApiResponse<LeaderboardsIncrementScoreResponse> LeaderboardsIncrementScoreWithHttpInfo(string leaderboardName, string userId, string token, IncrementScoreRequest body)
        {
            // verify the required parameter 'leaderboardName' is set
            if (leaderboardName == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'leaderboardName' when calling LeaderboardsServiceApi->LeaderboardsIncrementScore");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling LeaderboardsServiceApi->LeaderboardsIncrementScore");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling LeaderboardsServiceApi->LeaderboardsIncrementScore");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling LeaderboardsServiceApi->LeaderboardsIncrementScore");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboard_name", Snapser.Client.ClientUtils.ParameterToString(leaderboardName)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<LeaderboardsIncrementScoreResponse>("/v1/leaderboards/leaderboards/{leaderboard_name}/users/{user_id}/score", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaderboardsIncrementScore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Score Increments the leaderboard score for the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeaderboardsIncrementScoreResponse</returns>
        public async System.Threading.Tasks.Task<LeaderboardsIncrementScoreResponse> LeaderboardsIncrementScoreAsync(string leaderboardName, string userId, string token, IncrementScoreRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = LeaderboardsIncrementScoreWithHttpInfoAsync(leaderboardName, userId, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<LeaderboardsIncrementScoreResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<LeaderboardsIncrementScoreResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Score Increments the leaderboard score for the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeaderboardsIncrementScoreResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<LeaderboardsIncrementScoreResponse>> LeaderboardsIncrementScoreWithHttpInfoAsync(string leaderboardName, string userId, string token, IncrementScoreRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leaderboardName' is set
            if (leaderboardName == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'leaderboardName' when calling LeaderboardsServiceApi->LeaderboardsIncrementScore");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling LeaderboardsServiceApi->LeaderboardsIncrementScore");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling LeaderboardsServiceApi->LeaderboardsIncrementScore");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling LeaderboardsServiceApi->LeaderboardsIncrementScore");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboard_name", Snapser.Client.ClientUtils.ParameterToString(leaderboardName)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PatchAsync<LeaderboardsIncrementScoreResponse>("/v1/leaderboards/leaderboards/{leaderboard_name}/users/{user_id}/score", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaderboardsIncrementScore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Score Updates the leaderboard score for the user (only non &#39;counter&#39; leaderboards)
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>LeaderboardsSetScoreResponse</returns>
        public LeaderboardsSetScoreResponse LeaderboardsSetScore(string leaderboardName, string userId, string token, SetScoreRequest body)
        {
            Snapser.Client.ApiResponse<LeaderboardsSetScoreResponse> localVarResponse = LeaderboardsSetScoreWithHttpInfo(leaderboardName, userId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Score Updates the leaderboard score for the user (only non &#39;counter&#39; leaderboards)
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of LeaderboardsSetScoreResponse</returns>
        public Snapser.Client.ApiResponse<LeaderboardsSetScoreResponse> LeaderboardsSetScoreWithHttpInfo(string leaderboardName, string userId, string token, SetScoreRequest body)
        {
            // verify the required parameter 'leaderboardName' is set
            if (leaderboardName == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'leaderboardName' when calling LeaderboardsServiceApi->LeaderboardsSetScore");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling LeaderboardsServiceApi->LeaderboardsSetScore");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling LeaderboardsServiceApi->LeaderboardsSetScore");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling LeaderboardsServiceApi->LeaderboardsSetScore");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboard_name", Snapser.Client.ClientUtils.ParameterToString(leaderboardName)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<LeaderboardsSetScoreResponse>("/v1/leaderboards/leaderboards/{leaderboard_name}/users/{user_id}/score", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaderboardsSetScore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Score Updates the leaderboard score for the user (only non &#39;counter&#39; leaderboards)
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeaderboardsSetScoreResponse</returns>
        public async System.Threading.Tasks.Task<LeaderboardsSetScoreResponse> LeaderboardsSetScoreAsync(string leaderboardName, string userId, string token, SetScoreRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = LeaderboardsSetScoreWithHttpInfoAsync(leaderboardName, userId, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<LeaderboardsSetScoreResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<LeaderboardsSetScoreResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Score Updates the leaderboard score for the user (only non &#39;counter&#39; leaderboards)
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leaderboardName">Name of the leaderboard</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeaderboardsSetScoreResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<LeaderboardsSetScoreResponse>> LeaderboardsSetScoreWithHttpInfoAsync(string leaderboardName, string userId, string token, SetScoreRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'leaderboardName' is set
            if (leaderboardName == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'leaderboardName' when calling LeaderboardsServiceApi->LeaderboardsSetScore");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling LeaderboardsServiceApi->LeaderboardsSetScore");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling LeaderboardsServiceApi->LeaderboardsSetScore");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling LeaderboardsServiceApi->LeaderboardsSetScore");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("leaderboard_name", Snapser.Client.ClientUtils.ParameterToString(leaderboardName)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<LeaderboardsSetScoreResponse>("/v1/leaderboards/leaderboards/{leaderboard_name}/users/{user_id}/score", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaderboardsSetScore", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
