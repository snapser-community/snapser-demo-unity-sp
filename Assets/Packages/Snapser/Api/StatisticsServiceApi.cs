/*
 * snapship
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: snapship: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Snapser.Client;
using Snapser.Model;

namespace Snapser.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// User Statistics Batch Update API
        /// </summary>
        /// <remarks>
        /// Updates user statistics in bulk
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user for whom the stats are being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StatisticsBatchUpdateUserStatisticsResponse</returns>
        StatisticsBatchUpdateUserStatisticsResponse BatchUpdateUserStatistics(string userId, string token, BatchUpdateUserStatisticsRequest body);

        /// <summary>
        /// User Statistics Batch Update API
        /// </summary>
        /// <remarks>
        /// Updates user statistics in bulk
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user for whom the stats are being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatisticsBatchUpdateUserStatisticsResponse</returns>
        ApiResponse<StatisticsBatchUpdateUserStatisticsResponse> BatchUpdateUserStatisticsWithHttpInfo(string userId, string token, BatchUpdateUserStatisticsRequest body);
        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Fetches a specific user statistic by user id and stat key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <returns>StatisticsUserStatistic</returns>
        StatisticsUserStatistic GetUserStatistic(string userId, string key, string token);

        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Fetches a specific user statistic by user id and stat key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StatisticsUserStatistic</returns>
        ApiResponse<StatisticsUserStatistic> GetUserStatisticWithHttpInfo(string userId, string key, string token);
        /// <summary>
        /// User Statistics
        /// </summary>
        /// <remarks>
        /// Fetches all user-statistics for user or stat
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <returns>StatisticsGetUserStatisticsResponse</returns>
        StatisticsGetUserStatisticsResponse GetUserStatistics(string userId, string token);

        /// <summary>
        /// User Statistics
        /// </summary>
        /// <remarks>
        /// Fetches all user-statistics for user or stat
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StatisticsGetUserStatisticsResponse</returns>
        ApiResponse<StatisticsGetUserStatisticsResponse> GetUserStatisticsWithHttpInfo(string userId, string token);
        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Increments a user-statistic
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StatisticsUserStatistic</returns>
        StatisticsUserStatistic IncrementUserStatistic(string userId, string key, string token, IncrementUserStatisticRequest body);

        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Increments a user-statistic
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatisticsUserStatistic</returns>
        ApiResponse<StatisticsUserStatistic> IncrementUserStatisticWithHttpInfo(string userId, string key, string token, IncrementUserStatisticRequest body);
        /// <summary>
        /// User Segment Lookup
        /// </summary>
        /// <remarks>
        /// Returns true/false if user is in segment or not
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the segment</param>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <returns>StatisticsIsUserInSegmentResponse</returns>
        StatisticsIsUserInSegmentResponse IsUserInSegment(string name, string userId, string token);

        /// <summary>
        /// User Segment Lookup
        /// </summary>
        /// <remarks>
        /// Returns true/false if user is in segment or not
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the segment</param>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StatisticsIsUserInSegmentResponse</returns>
        ApiResponse<StatisticsIsUserInSegmentResponse> IsUserInSegmentWithHttpInfo(string name, string userId, string token);
        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Sets a user statistic to exact value provided
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StatisticsUserStatistic</returns>
        StatisticsUserStatistic SetUserStatistic(string userId, string key, string token, SetUserStatisticRequest body);

        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Sets a user statistic to exact value provided
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatisticsUserStatistic</returns>
        ApiResponse<StatisticsUserStatistic> SetUserStatisticWithHttpInfo(string userId, string key, string token, SetUserStatisticRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// User Statistics Batch Update API
        /// </summary>
        /// <remarks>
        /// Updates user statistics in bulk
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user for whom the stats are being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsBatchUpdateUserStatisticsResponse</returns>
        System.Threading.Tasks.Task<StatisticsBatchUpdateUserStatisticsResponse> BatchUpdateUserStatisticsAsync(string userId, string token, BatchUpdateUserStatisticsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Statistics Batch Update API
        /// </summary>
        /// <remarks>
        /// Updates user statistics in bulk
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user for whom the stats are being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsBatchUpdateUserStatisticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticsBatchUpdateUserStatisticsResponse>> BatchUpdateUserStatisticsWithHttpInfoAsync(string userId, string token, BatchUpdateUserStatisticsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Fetches a specific user statistic by user id and stat key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsUserStatistic</returns>
        System.Threading.Tasks.Task<StatisticsUserStatistic> GetUserStatisticAsync(string userId, string key, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Fetches a specific user statistic by user id and stat key
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsUserStatistic)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticsUserStatistic>> GetUserStatisticWithHttpInfoAsync(string userId, string key, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Statistics
        /// </summary>
        /// <remarks>
        /// Fetches all user-statistics for user or stat
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsGetUserStatisticsResponse</returns>
        System.Threading.Tasks.Task<StatisticsGetUserStatisticsResponse> GetUserStatisticsAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Statistics
        /// </summary>
        /// <remarks>
        /// Fetches all user-statistics for user or stat
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsGetUserStatisticsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticsGetUserStatisticsResponse>> GetUserStatisticsWithHttpInfoAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Increments a user-statistic
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsUserStatistic</returns>
        System.Threading.Tasks.Task<StatisticsUserStatistic> IncrementUserStatisticAsync(string userId, string key, string token, IncrementUserStatisticRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Increments a user-statistic
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsUserStatistic)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticsUserStatistic>> IncrementUserStatisticWithHttpInfoAsync(string userId, string key, string token, IncrementUserStatisticRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Segment Lookup
        /// </summary>
        /// <remarks>
        /// Returns true/false if user is in segment or not
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the segment</param>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsIsUserInSegmentResponse</returns>
        System.Threading.Tasks.Task<StatisticsIsUserInSegmentResponse> IsUserInSegmentAsync(string name, string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Segment Lookup
        /// </summary>
        /// <remarks>
        /// Returns true/false if user is in segment or not
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the segment</param>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsIsUserInSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticsIsUserInSegmentResponse>> IsUserInSegmentWithHttpInfoAsync(string name, string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Sets a user statistic to exact value provided
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsUserStatistic</returns>
        System.Threading.Tasks.Task<StatisticsUserStatistic> SetUserStatisticAsync(string userId, string key, string token, SetUserStatisticRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Statistic
        /// </summary>
        /// <remarks>
        /// Sets a user statistic to exact value provided
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsUserStatistic)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatisticsUserStatistic>> SetUserStatisticWithHttpInfoAsync(string userId, string key, string token, SetUserStatisticRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsServiceApi : IStatisticsServiceApiSync, IStatisticsServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatisticsServiceApi : IDisposable, IStatisticsServiceApi
    {
        private Snapser.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public StatisticsServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public StatisticsServiceApi(string basePath)
        {
            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public StatisticsServiceApi(Snapser.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsServiceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public StatisticsServiceApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsServiceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public StatisticsServiceApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsServiceApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public StatisticsServiceApi(HttpClient client, Snapser.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public StatisticsServiceApi(Snapser.Client.ISynchronousClient client, Snapser.Client.IAsynchronousClient asyncClient, Snapser.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Snapser.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Snapser.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Snapser.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Snapser.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Snapser.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// User Statistics Batch Update API Updates user statistics in bulk
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user for whom the stats are being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StatisticsBatchUpdateUserStatisticsResponse</returns>
        public StatisticsBatchUpdateUserStatisticsResponse BatchUpdateUserStatistics(string userId, string token, BatchUpdateUserStatisticsRequest body)
        {
            Snapser.Client.ApiResponse<StatisticsBatchUpdateUserStatisticsResponse> localVarResponse = BatchUpdateUserStatisticsWithHttpInfo(userId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Statistics Batch Update API Updates user statistics in bulk
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user for whom the stats are being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatisticsBatchUpdateUserStatisticsResponse</returns>
        public Snapser.Client.ApiResponse<StatisticsBatchUpdateUserStatisticsResponse> BatchUpdateUserStatisticsWithHttpInfo(string userId, string token, BatchUpdateUserStatisticsRequest body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->BatchUpdateUserStatistics");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->BatchUpdateUserStatistics");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StatisticsServiceApi->BatchUpdateUserStatistics");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StatisticsBatchUpdateUserStatisticsResponse>("/v1/statistics/user-stats/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateUserStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Statistics Batch Update API Updates user statistics in bulk
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user for whom the stats are being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsBatchUpdateUserStatisticsResponse</returns>
        public async System.Threading.Tasks.Task<StatisticsBatchUpdateUserStatisticsResponse> BatchUpdateUserStatisticsAsync(string userId, string token, BatchUpdateUserStatisticsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<StatisticsBatchUpdateUserStatisticsResponse> localVarResponse = await BatchUpdateUserStatisticsWithHttpInfoAsync(userId, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Statistics Batch Update API Updates user statistics in bulk
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user for whom the stats are being updated</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsBatchUpdateUserStatisticsResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StatisticsBatchUpdateUserStatisticsResponse>> BatchUpdateUserStatisticsWithHttpInfoAsync(string userId, string token, BatchUpdateUserStatisticsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->BatchUpdateUserStatistics");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->BatchUpdateUserStatistics");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StatisticsServiceApi->BatchUpdateUserStatistics");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<StatisticsBatchUpdateUserStatisticsResponse>("/v1/statistics/user-stats/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BatchUpdateUserStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Statistic Fetches a specific user statistic by user id and stat key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <returns>StatisticsUserStatistic</returns>
        public StatisticsUserStatistic GetUserStatistic(string userId, string key, string token)
        {
            Snapser.Client.ApiResponse<StatisticsUserStatistic> localVarResponse = GetUserStatisticWithHttpInfo(userId, key, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Statistic Fetches a specific user statistic by user id and stat key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StatisticsUserStatistic</returns>
        public Snapser.Client.ApiResponse<StatisticsUserStatistic> GetUserStatisticWithHttpInfo(string userId, string key, string token)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->GetUserStatistic");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'key' when calling StatisticsServiceApi->GetUserStatistic");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->GetUserStatistic");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Snapser.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StatisticsUserStatistic>("/v1/statistics/user-stats/{user_id}/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserStatistic", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Statistic Fetches a specific user statistic by user id and stat key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsUserStatistic</returns>
        public async System.Threading.Tasks.Task<StatisticsUserStatistic> GetUserStatisticAsync(string userId, string key, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<StatisticsUserStatistic> localVarResponse = await GetUserStatisticWithHttpInfoAsync(userId, key, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Statistic Fetches a specific user statistic by user id and stat key
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsUserStatistic)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StatisticsUserStatistic>> GetUserStatisticWithHttpInfoAsync(string userId, string key, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->GetUserStatistic");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'key' when calling StatisticsServiceApi->GetUserStatistic");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->GetUserStatistic");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Snapser.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StatisticsUserStatistic>("/v1/statistics/user-stats/{user_id}/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserStatistic", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Statistics Fetches all user-statistics for user or stat
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <returns>StatisticsGetUserStatisticsResponse</returns>
        public StatisticsGetUserStatisticsResponse GetUserStatistics(string userId, string token)
        {
            Snapser.Client.ApiResponse<StatisticsGetUserStatisticsResponse> localVarResponse = GetUserStatisticsWithHttpInfo(userId, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Statistics Fetches all user-statistics for user or stat
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StatisticsGetUserStatisticsResponse</returns>
        public Snapser.Client.ApiResponse<StatisticsGetUserStatisticsResponse> GetUserStatisticsWithHttpInfo(string userId, string token)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->GetUserStatistics");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->GetUserStatistics");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StatisticsGetUserStatisticsResponse>("/v1/statistics/settings/user-stats/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Statistics Fetches all user-statistics for user or stat
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsGetUserStatisticsResponse</returns>
        public async System.Threading.Tasks.Task<StatisticsGetUserStatisticsResponse> GetUserStatisticsAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<StatisticsGetUserStatisticsResponse> localVarResponse = await GetUserStatisticsWithHttpInfoAsync(userId, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Statistics Fetches all user-statistics for user or stat
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsGetUserStatisticsResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StatisticsGetUserStatisticsResponse>> GetUserStatisticsWithHttpInfoAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->GetUserStatistics");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->GetUserStatistics");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StatisticsGetUserStatisticsResponse>("/v1/statistics/settings/user-stats/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Statistic Increments a user-statistic
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StatisticsUserStatistic</returns>
        public StatisticsUserStatistic IncrementUserStatistic(string userId, string key, string token, IncrementUserStatisticRequest body)
        {
            Snapser.Client.ApiResponse<StatisticsUserStatistic> localVarResponse = IncrementUserStatisticWithHttpInfo(userId, key, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Statistic Increments a user-statistic
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatisticsUserStatistic</returns>
        public Snapser.Client.ApiResponse<StatisticsUserStatistic> IncrementUserStatisticWithHttpInfo(string userId, string key, string token, IncrementUserStatisticRequest body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->IncrementUserStatistic");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'key' when calling StatisticsServiceApi->IncrementUserStatistic");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->IncrementUserStatistic");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StatisticsServiceApi->IncrementUserStatistic");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Snapser.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<StatisticsUserStatistic>("/v1/statistics/user-stats/{user_id}/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncrementUserStatistic", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Statistic Increments a user-statistic
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsUserStatistic</returns>
        public async System.Threading.Tasks.Task<StatisticsUserStatistic> IncrementUserStatisticAsync(string userId, string key, string token, IncrementUserStatisticRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<StatisticsUserStatistic> localVarResponse = await IncrementUserStatisticWithHttpInfoAsync(userId, key, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Statistic Increments a user-statistic
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsUserStatistic)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StatisticsUserStatistic>> IncrementUserStatisticWithHttpInfoAsync(string userId, string key, string token, IncrementUserStatisticRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->IncrementUserStatistic");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'key' when calling StatisticsServiceApi->IncrementUserStatistic");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->IncrementUserStatistic");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StatisticsServiceApi->IncrementUserStatistic");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Snapser.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<StatisticsUserStatistic>("/v1/statistics/user-stats/{user_id}/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IncrementUserStatistic", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Segment Lookup Returns true/false if user is in segment or not
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the segment</param>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <returns>StatisticsIsUserInSegmentResponse</returns>
        public StatisticsIsUserInSegmentResponse IsUserInSegment(string name, string userId, string token)
        {
            Snapser.Client.ApiResponse<StatisticsIsUserInSegmentResponse> localVarResponse = IsUserInSegmentWithHttpInfo(name, userId, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Segment Lookup Returns true/false if user is in segment or not
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the segment</param>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of StatisticsIsUserInSegmentResponse</returns>
        public Snapser.Client.ApiResponse<StatisticsIsUserInSegmentResponse> IsUserInSegmentWithHttpInfo(string name, string userId, string token)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'name' when calling StatisticsServiceApi->IsUserInSegment");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->IsUserInSegment");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->IsUserInSegment");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", Snapser.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<StatisticsIsUserInSegmentResponse>("/v1/statistics/segments/{name}/users/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IsUserInSegment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Segment Lookup Returns true/false if user is in segment or not
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the segment</param>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsIsUserInSegmentResponse</returns>
        public async System.Threading.Tasks.Task<StatisticsIsUserInSegmentResponse> IsUserInSegmentAsync(string name, string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<StatisticsIsUserInSegmentResponse> localVarResponse = await IsUserInSegmentWithHttpInfoAsync(name, userId, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Segment Lookup Returns true/false if user is in segment or not
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Name of the segment</param>
        /// <param name="userId">User ID of the user</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsIsUserInSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StatisticsIsUserInSegmentResponse>> IsUserInSegmentWithHttpInfoAsync(string name, string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'name' when calling StatisticsServiceApi->IsUserInSegment");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->IsUserInSegment");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->IsUserInSegment");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("name", Snapser.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StatisticsIsUserInSegmentResponse>("/v1/statistics/segments/{name}/users/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IsUserInSegment", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Statistic Sets a user statistic to exact value provided
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>StatisticsUserStatistic</returns>
        public StatisticsUserStatistic SetUserStatistic(string userId, string key, string token, SetUserStatisticRequest body)
        {
            Snapser.Client.ApiResponse<StatisticsUserStatistic> localVarResponse = SetUserStatisticWithHttpInfo(userId, key, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Statistic Sets a user statistic to exact value provided
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatisticsUserStatistic</returns>
        public Snapser.Client.ApiResponse<StatisticsUserStatistic> SetUserStatisticWithHttpInfo(string userId, string key, string token, SetUserStatisticRequest body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->SetUserStatistic");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'key' when calling StatisticsServiceApi->SetUserStatistic");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->SetUserStatistic");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StatisticsServiceApi->SetUserStatistic");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Snapser.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<StatisticsUserStatistic>("/v1/statistics/user-stats/{user_id}/{key}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserStatistic", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Statistic Sets a user statistic to exact value provided
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatisticsUserStatistic</returns>
        public async System.Threading.Tasks.Task<StatisticsUserStatistic> SetUserStatisticAsync(string userId, string key, string token, SetUserStatisticRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<StatisticsUserStatistic> localVarResponse = await SetUserStatisticWithHttpInfoAsync(userId, key, token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Statistic Sets a user statistic to exact value provided
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested</param>
        /// <param name="key">Name of the user statistic</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatisticsUserStatistic)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<StatisticsUserStatistic>> SetUserStatisticWithHttpInfoAsync(string userId, string key, string token, SetUserStatisticRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling StatisticsServiceApi->SetUserStatistic");

            // verify the required parameter 'key' is set
            if (key == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'key' when calling StatisticsServiceApi->SetUserStatistic");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling StatisticsServiceApi->SetUserStatistic");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling StatisticsServiceApi->SetUserStatistic");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("key", Snapser.Client.ClientUtils.ParameterToString(key)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<StatisticsUserStatistic>("/v1/statistics/user-stats/{user_id}/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetUserStatistic", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
