/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Snapser.Client;
using Snapser.Model;

namespace Snapser.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfilesServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Deletes a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being deleted</param>
        /// <param name="token">User session token</param>
        /// <returns>Object</returns>
        Object ProfilesDeleteProfile(string userId, string token);

        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Deletes a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being deleted</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProfilesDeleteProfileWithHttpInfo(string userId, string token);
        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Gets a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being viewed</param>
        /// <param name="token">User session token</param>
        /// <returns>ProfilesGetProfileResponse</returns>
        ProfilesGetProfileResponse ProfilesGetProfile(string userId, string token);

        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Gets a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being viewed</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of ProfilesGetProfileResponse</returns>
        ApiResponse<ProfilesGetProfileResponse> ProfilesGetProfileWithHttpInfo(string userId, string token);
        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Patches a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being patched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ProfilesPatchProfileResponse</returns>
        ProfilesPatchProfileResponse ProfilesPatchProfile(string userId, string token, PatchProfileRequest body);

        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Patches a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being patched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProfilesPatchProfileResponse</returns>
        ApiResponse<ProfilesPatchProfileResponse> ProfilesPatchProfileWithHttpInfo(string userId, string token, PatchProfileRequest body);
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// Searches for user profiles
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ProfilesSearchProfilesResponse</returns>
        ProfilesSearchProfilesResponse ProfilesSearchProfiles(string token, ProfilesSearchProfilesRequest body);

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// Searches for user profiles
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProfilesSearchProfilesResponse</returns>
        ApiResponse<ProfilesSearchProfilesResponse> ProfilesSearchProfilesWithHttpInfo(string token, ProfilesSearchProfilesRequest body);
        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Insert or update a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being upserted</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object ProfilesUpsertProfile(string userId, string token, UpsertProfileRequest body);

        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Insert or update a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being upserted</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ProfilesUpsertProfileWithHttpInfo(string userId, string token, UpsertProfileRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfilesServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Deletes a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being deleted</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProfilesDeleteProfileAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Deletes a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being deleted</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesDeleteProfileWithHttpInfoAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Gets a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being viewed</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfilesGetProfileResponse</returns>
        System.Threading.Tasks.Task<ProfilesGetProfileResponse> ProfilesGetProfileAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Gets a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being viewed</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfilesGetProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfilesGetProfileResponse>> ProfilesGetProfileWithHttpInfoAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Patches a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being patched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfilesPatchProfileResponse</returns>
        System.Threading.Tasks.Task<ProfilesPatchProfileResponse> ProfilesPatchProfileAsync(string userId, string token, PatchProfileRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Patches a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being patched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfilesPatchProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfilesPatchProfileResponse>> ProfilesPatchProfileWithHttpInfoAsync(string userId, string token, PatchProfileRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// Searches for user profiles
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfilesSearchProfilesResponse</returns>
        System.Threading.Tasks.Task<ProfilesSearchProfilesResponse> ProfilesSearchProfilesAsync(string token, ProfilesSearchProfilesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search
        /// </summary>
        /// <remarks>
        /// Searches for user profiles
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfilesSearchProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProfilesSearchProfilesResponse>> ProfilesSearchProfilesWithHttpInfoAsync(string token, ProfilesSearchProfilesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Insert or update a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being upserted</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ProfilesUpsertProfileAsync(string userId, string token, UpsertProfileRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// User Profile
        /// </summary>
        /// <remarks>
        /// Insert or update a user&#39;s profile
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being upserted</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ProfilesUpsertProfileWithHttpInfoAsync(string userId, string token, UpsertProfileRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfilesServiceApi : IProfilesServiceApiSync, IProfilesServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProfilesServiceApi : IDisposable, IProfilesServiceApi
    {
        private Snapser.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ProfilesServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ProfilesServiceApi(string basePath)
        {
            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ProfilesServiceApi(Snapser.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ProfilesServiceApi(Snapser.Client.ISynchronousClient client, Snapser.Client.IAsynchronousClient asyncClient, Snapser.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Snapser.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Snapser.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Snapser.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Snapser.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Snapser.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// User Profile Deletes a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being deleted</param>
        /// <param name="token">User session token</param>
        /// <returns>Object</returns>
        public Object ProfilesDeleteProfile(string userId, string token)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = ProfilesDeleteProfileWithHttpInfo(userId, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Profile Deletes a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being deleted</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> ProfilesDeleteProfileWithHttpInfo(string userId, string token)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling ProfilesServiceApi->ProfilesDeleteProfile");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling ProfilesServiceApi->ProfilesDeleteProfile");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/profiles/user/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfilesDeleteProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Profile Deletes a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being deleted</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProfilesDeleteProfileAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ProfilesDeleteProfileWithHttpInfoAsync(userId, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Profile Deletes a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being deleted</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> ProfilesDeleteProfileWithHttpInfoAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling ProfilesServiceApi->ProfilesDeleteProfile");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling ProfilesServiceApi->ProfilesDeleteProfile");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.DeleteAsync<Object>("/v1/profiles/user/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfilesDeleteProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Profile Gets a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being viewed</param>
        /// <param name="token">User session token</param>
        /// <returns>ProfilesGetProfileResponse</returns>
        public ProfilesGetProfileResponse ProfilesGetProfile(string userId, string token)
        {
            Snapser.Client.ApiResponse<ProfilesGetProfileResponse> localVarResponse = ProfilesGetProfileWithHttpInfo(userId, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Profile Gets a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being viewed</param>
        /// <param name="token">User session token</param>
        /// <returns>ApiResponse of ProfilesGetProfileResponse</returns>
        public Snapser.Client.ApiResponse<ProfilesGetProfileResponse> ProfilesGetProfileWithHttpInfo(string userId, string token)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling ProfilesServiceApi->ProfilesGetProfile");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling ProfilesServiceApi->ProfilesGetProfile");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<ProfilesGetProfileResponse>("/v1/profiles/user/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfilesGetProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Profile Gets a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being viewed</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfilesGetProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfilesGetProfileResponse> ProfilesGetProfileAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ProfilesGetProfileWithHttpInfoAsync(userId, token, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<ProfilesGetProfileResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<ProfilesGetProfileResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Profile Gets a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being viewed</param>
        /// <param name="token">User session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfilesGetProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<ProfilesGetProfileResponse>> ProfilesGetProfileWithHttpInfoAsync(string userId, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling ProfilesServiceApi->ProfilesGetProfile");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling ProfilesServiceApi->ProfilesGetProfile");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<ProfilesGetProfileResponse>("/v1/profiles/user/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfilesGetProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Profile Patches a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being patched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ProfilesPatchProfileResponse</returns>
        public ProfilesPatchProfileResponse ProfilesPatchProfile(string userId, string token, PatchProfileRequest body)
        {
            Snapser.Client.ApiResponse<ProfilesPatchProfileResponse> localVarResponse = ProfilesPatchProfileWithHttpInfo(userId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Profile Patches a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being patched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProfilesPatchProfileResponse</returns>
        public Snapser.Client.ApiResponse<ProfilesPatchProfileResponse> ProfilesPatchProfileWithHttpInfo(string userId, string token, PatchProfileRequest body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling ProfilesServiceApi->ProfilesPatchProfile");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling ProfilesServiceApi->ProfilesPatchProfile");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling ProfilesServiceApi->ProfilesPatchProfile");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<ProfilesPatchProfileResponse>("/v1/profiles/user/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfilesPatchProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Profile Patches a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being patched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfilesPatchProfileResponse</returns>
        public async System.Threading.Tasks.Task<ProfilesPatchProfileResponse> ProfilesPatchProfileAsync(string userId, string token, PatchProfileRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ProfilesPatchProfileWithHttpInfoAsync(userId, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<ProfilesPatchProfileResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<ProfilesPatchProfileResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Profile Patches a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being patched</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfilesPatchProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<ProfilesPatchProfileResponse>> ProfilesPatchProfileWithHttpInfoAsync(string userId, string token, PatchProfileRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling ProfilesServiceApi->ProfilesPatchProfile");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling ProfilesServiceApi->ProfilesPatchProfile");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling ProfilesServiceApi->ProfilesPatchProfile");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PatchAsync<ProfilesPatchProfileResponse>("/v1/profiles/user/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfilesPatchProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Searches for user profiles
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ProfilesSearchProfilesResponse</returns>
        public ProfilesSearchProfilesResponse ProfilesSearchProfiles(string token, ProfilesSearchProfilesRequest body)
        {
            Snapser.Client.ApiResponse<ProfilesSearchProfilesResponse> localVarResponse = ProfilesSearchProfilesWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Searches for user profiles
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ProfilesSearchProfilesResponse</returns>
        public Snapser.Client.ApiResponse<ProfilesSearchProfilesResponse> ProfilesSearchProfilesWithHttpInfo(string token, ProfilesSearchProfilesRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling ProfilesServiceApi->ProfilesSearchProfiles");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling ProfilesServiceApi->ProfilesSearchProfiles");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ProfilesSearchProfilesResponse>("/v1/profiles/search", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfilesSearchProfiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Searches for user profiles
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ProfilesSearchProfilesResponse</returns>
        public async System.Threading.Tasks.Task<ProfilesSearchProfilesResponse> ProfilesSearchProfilesAsync(string token, ProfilesSearchProfilesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ProfilesSearchProfilesWithHttpInfoAsync(token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<ProfilesSearchProfilesResponse> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<ProfilesSearchProfilesResponse> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Searches for user profiles
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ProfilesSearchProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<ProfilesSearchProfilesResponse>> ProfilesSearchProfilesWithHttpInfoAsync(string token, ProfilesSearchProfilesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling ProfilesServiceApi->ProfilesSearchProfiles");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling ProfilesServiceApi->ProfilesSearchProfiles");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ProfilesSearchProfilesResponse>("/v1/profiles/search", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfilesSearchProfiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Profile Insert or update a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being upserted</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object ProfilesUpsertProfile(string userId, string token, UpsertProfileRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = ProfilesUpsertProfileWithHttpInfo(userId, token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Profile Insert or update a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being upserted</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> ProfilesUpsertProfileWithHttpInfo(string userId, string token, UpsertProfileRequest body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling ProfilesServiceApi->ProfilesUpsertProfile");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling ProfilesServiceApi->ProfilesUpsertProfile");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling ProfilesServiceApi->ProfilesUpsertProfile");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/profiles/user/{user_id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfilesUpsertProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// User Profile Insert or update a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being upserted</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ProfilesUpsertProfileAsync(string userId, string token, UpsertProfileRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ProfilesUpsertProfileWithHttpInfoAsync(userId, token, body, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            Snapser.Client.ApiResponse<Object> localVarResponse = await task.ConfigureAwait(false);
#else
            Snapser.Client.ApiResponse<Object> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// User Profile Insert or update a user&#39;s profile
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID of the user who&#39;s profile is being upserted</param>
        /// <param name="token">User session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> ProfilesUpsertProfileWithHttpInfoAsync(string userId, string token, UpsertProfileRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'userId' when calling ProfilesServiceApi->ProfilesUpsertProfile");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling ProfilesServiceApi->ProfilesUpsertProfile");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling ProfilesServiceApi->ProfilesUpsertProfile");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("user_id", Snapser.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var task = this.AsynchronousClient.PutAsync<Object>("/v1/profiles/user/{user_id}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ProfilesUpsertProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
