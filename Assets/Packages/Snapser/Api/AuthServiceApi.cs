/*
 * snapship
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: snapship: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Snapser.Client;
using Snapser.Model;

namespace Snapser.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAnonLoginResponse</returns>
        AuthAnonLoginResponse AnonLogin(AuthAnonLoginRequest body);

        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAnonLoginResponse</returns>
        ApiResponse<AuthAnonLoginResponse> AnonLoginWithHttpInfo(AuthAnonLoginRequest body);
        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAppleLoginResponse</returns>
        AuthAppleLoginResponse AppleLogin(AuthAppleLoginRequest body);

        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAppleLoginResponse</returns>
        ApiResponse<AuthAppleLoginResponse> AppleLoginWithHttpInfo(AuthAppleLoginRequest body);
        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object AssociateLogins(AuthAssociateLoginsRequest body);

        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AssociateLoginsWithHttpInfo(AuthAssociateLoginsRequest body);
        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Deletes the user based on the user ID
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UserID of the user to be deleted</param>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <returns>Object</returns>
        Object DeleteUser(string id, string token);

        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Deletes the user based on the user ID
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UserID of the user to be deleted</param>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo(string id, string token);
        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEmailLoginResponse</returns>
        AuthEmailLoginResponse EmailLogin(AuthEmailLoginRequest body);

        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEmailLoginResponse</returns>
        ApiResponse<AuthEmailLoginResponse> EmailLoginWithHttpInfo(AuthEmailLoginRequest body);
        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthFacebookLoginResponse</returns>
        AuthFacebookLoginResponse FacebookLogin(AuthFacebookLoginRequest body);

        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthFacebookLoginResponse</returns>
        ApiResponse<AuthFacebookLoginResponse> FacebookLoginWithHttpInfo(AuthFacebookLoginRequest body);
        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthGoogleLoginResponse</returns>
        AuthGoogleLoginResponse GoogleLogin(AuthGoogleLoginRequest body);

        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthGoogleLoginResponse</returns>
        ApiResponse<AuthGoogleLoginResponse> GoogleLoginWithHttpInfo(AuthGoogleLoginRequest body);
        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">Logged in user&#39;s session token</param>
        /// <returns>Object</returns>
        Object Logout(string token, string token2);

        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">Logged in user&#39;s session token</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LogoutWithHttpInfo(string token, string token2);
        /// <summary>
        /// Generate One Time Password
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object Otp(AuthOtpRequest body);

        /// <summary>
        /// Generate One Time Password
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> OtpWithHttpInfo(AuthOtpRequest body);
        /// <summary>
        /// Refresh Session Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="body"></param>
        /// <returns>AuthRefreshResponse</returns>
        AuthRefreshResponse Refresh(string token, AuthRefreshRequest body);

        /// <summary>
        /// Refresh Session Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthRefreshResponse</returns>
        ApiResponse<AuthRefreshResponse> RefreshWithHttpInfo(string token, AuthRefreshRequest body);
        /// <summary>
        /// Validate Session Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthValidateResponse</returns>
        AuthValidateResponse Validate(AuthValidateRequest body);

        /// <summary>
        /// Validate Session Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthValidateResponse</returns>
        ApiResponse<AuthValidateResponse> ValidateWithHttpInfo(AuthValidateRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAnonLoginResponse</returns>
        System.Threading.Tasks.Task<AuthAnonLoginResponse> AnonLoginAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Anonymous Login
        /// </summary>
        /// <remarks>
        /// Logs in the user with an arbitrary identifier specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAnonLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthAnonLoginResponse>> AnonLoginWithHttpInfoAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAppleLoginResponse</returns>
        System.Threading.Tasks.Task<AuthAppleLoginResponse> AppleLoginAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Apple Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the apple credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAppleLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthAppleLoginResponse>> AppleLoginWithHttpInfoAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AssociateLoginsAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Associate Multiple Logins
        /// </summary>
        /// <remarks>
        /// Associates two logins based on their session tokens
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AssociateLoginsWithHttpInfoAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Deletes the user based on the user ID
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UserID of the user to be deleted</param>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DeleteUserAsync(string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete User
        /// </summary>
        /// <remarks>
        /// Deletes the user based on the user ID
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UserID of the user to be deleted</param>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEmailLoginResponse</returns>
        System.Threading.Tasks.Task<AuthEmailLoginResponse> EmailLoginAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the email and OTP specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEmailLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthEmailLoginResponse>> EmailLoginWithHttpInfoAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthFacebookLoginResponse</returns>
        System.Threading.Tasks.Task<AuthFacebookLoginResponse> FacebookLoginAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Facebook Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the facebook credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthFacebookLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthFacebookLoginResponse>> FacebookLoginWithHttpInfoAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGoogleLoginResponse</returns>
        System.Threading.Tasks.Task<AuthGoogleLoginResponse> GoogleLoginAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Google Login
        /// </summary>
        /// <remarks>
        /// Logs in the user based on the google credential token specified and returns a session
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGoogleLoginResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthGoogleLoginResponse>> GoogleLoginWithHttpInfoAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">Logged in user&#39;s session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LogoutAsync(string token, string token2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Logout User
        /// </summary>
        /// <remarks>
        /// Ends the current session of the user
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">Logged in user&#39;s session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogoutWithHttpInfoAsync(string token, string token2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generate One Time Password
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> OtpAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate One Time Password
        /// </summary>
        /// <remarks>
        /// Generates an OTP and sends it to the email for logging in
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> OtpWithHttpInfoAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh Session Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthRefreshResponse</returns>
        System.Threading.Tasks.Task<AuthRefreshResponse> RefreshAsync(string token, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh Session Token
        /// </summary>
        /// <remarks>
        /// Refreshes the session and returns a new session token with refreshed validity
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthRefreshResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthRefreshResponse>> RefreshWithHttpInfoAsync(string token, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Validate Session Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthValidateResponse</returns>
        System.Threading.Tasks.Task<AuthValidateResponse> ValidateAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Validate Session Token
        /// </summary>
        /// <remarks>
        /// Validates the session of the user and returns the user info
        /// </remarks>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthValidateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthValidateResponse>> ValidateWithHttpInfoAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServiceApi : IAuthServiceApiSync, IAuthServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthServiceApi : IDisposable, IAuthServiceApi
    {
        private Snapser.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AuthServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AuthServiceApi(string basePath)
        {
            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AuthServiceApi(Snapser.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthServiceApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthServiceApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                new Snapser.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Snapser.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthServiceApi(HttpClient client, Snapser.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Snapser.Client.Configuration.MergeConfigurations(
                Snapser.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Snapser.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AuthServiceApi(Snapser.Client.ISynchronousClient client, Snapser.Client.IAsynchronousClient asyncClient, Snapser.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Snapser.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Snapser.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Snapser.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Snapser.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Snapser.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Snapser.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAnonLoginResponse</returns>
        public AuthAnonLoginResponse AnonLogin(AuthAnonLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthAnonLoginResponse> localVarResponse = AnonLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAnonLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthAnonLoginResponse> AnonLoginWithHttpInfo(AuthAnonLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AnonLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthAnonLoginResponse>("/v1/auth/login/anon", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnonLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAnonLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthAnonLoginResponse> AnonLoginAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<AuthAnonLoginResponse> localVarResponse = await AnonLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Anonymous Login Logs in the user with an arbitrary identifier specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAnonLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthAnonLoginResponse>> AnonLoginWithHttpInfoAsync(AuthAnonLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AnonLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthAnonLoginResponse>("/v1/auth/login/anon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AnonLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthAppleLoginResponse</returns>
        public AuthAppleLoginResponse AppleLogin(AuthAppleLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthAppleLoginResponse> localVarResponse = AppleLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthAppleLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthAppleLoginResponse> AppleLoginWithHttpInfo(AuthAppleLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AppleLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthAppleLoginResponse>("/v1/auth/login/apple", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthAppleLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthAppleLoginResponse> AppleLoginAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<AuthAppleLoginResponse> localVarResponse = await AppleLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Apple Login Logs in the user based on the apple credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthAppleLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthAppleLoginResponse>> AppleLoginWithHttpInfoAsync(AuthAppleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AppleLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthAppleLoginResponse>("/v1/auth/login/apple", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object AssociateLogins(AuthAssociateLoginsRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = AssociateLoginsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> AssociateLoginsWithHttpInfo(AuthAssociateLoginsRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AssociateLogins");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v1/auth/associate-logins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateLogins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AssociateLoginsAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = await AssociateLoginsWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Associate Multiple Logins Associates two logins based on their session tokens
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> AssociateLoginsWithHttpInfoAsync(AuthAssociateLoginsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->AssociateLogins");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v1/auth/associate-logins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AssociateLogins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Deletes the user based on the user ID
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UserID of the user to be deleted</param>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <returns>Object</returns>
        public Object DeleteUser(string id, string token)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = DeleteUserWithHttpInfo(id, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete User Deletes the user based on the user ID
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UserID of the user to be deleted</param>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> DeleteUserWithHttpInfo(string id, string token)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'id' when calling AuthServiceApi->DeleteUser");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->DeleteUser");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Snapser.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/auth/user/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Deletes the user based on the user ID
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UserID of the user to be deleted</param>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DeleteUserAsync(string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = await DeleteUserWithHttpInfoAsync(id, token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete User Deletes the user based on the user ID
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">UserID of the user to be deleted</param>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string id, string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'id' when calling AuthServiceApi->DeleteUser");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->DeleteUser");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Snapser.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/auth/user/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthEmailLoginResponse</returns>
        public AuthEmailLoginResponse EmailLogin(AuthEmailLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthEmailLoginResponse> localVarResponse = EmailLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthEmailLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthEmailLoginResponse> EmailLoginWithHttpInfo(AuthEmailLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->EmailLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthEmailLoginResponse>("/v1/auth/login/email", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthEmailLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthEmailLoginResponse> EmailLoginAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<AuthEmailLoginResponse> localVarResponse = await EmailLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email Login Logs in the user based on the email and OTP specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthEmailLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthEmailLoginResponse>> EmailLoginWithHttpInfoAsync(AuthEmailLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->EmailLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthEmailLoginResponse>("/v1/auth/login/email", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EmailLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthFacebookLoginResponse</returns>
        public AuthFacebookLoginResponse FacebookLogin(AuthFacebookLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthFacebookLoginResponse> localVarResponse = FacebookLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthFacebookLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthFacebookLoginResponse> FacebookLoginWithHttpInfo(AuthFacebookLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->FacebookLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthFacebookLoginResponse>("/v1/auth/login/facebook", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FacebookLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthFacebookLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthFacebookLoginResponse> FacebookLoginAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<AuthFacebookLoginResponse> localVarResponse = await FacebookLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Facebook Login Logs in the user based on the facebook credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthFacebookLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthFacebookLoginResponse>> FacebookLoginWithHttpInfoAsync(AuthFacebookLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->FacebookLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthFacebookLoginResponse>("/v1/auth/login/facebook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FacebookLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthGoogleLoginResponse</returns>
        public AuthGoogleLoginResponse GoogleLogin(AuthGoogleLoginRequest body)
        {
            Snapser.Client.ApiResponse<AuthGoogleLoginResponse> localVarResponse = GoogleLoginWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthGoogleLoginResponse</returns>
        public Snapser.Client.ApiResponse<AuthGoogleLoginResponse> GoogleLoginWithHttpInfo(AuthGoogleLoginRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->GoogleLogin");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Put<AuthGoogleLoginResponse>("/v1/auth/login/google", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GoogleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthGoogleLoginResponse</returns>
        public async System.Threading.Tasks.Task<AuthGoogleLoginResponse> GoogleLoginAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<AuthGoogleLoginResponse> localVarResponse = await GoogleLoginWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Google Login Logs in the user based on the google credential token specified and returns a session
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthGoogleLoginResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthGoogleLoginResponse>> GoogleLoginWithHttpInfoAsync(AuthGoogleLoginRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->GoogleLogin");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<AuthGoogleLoginResponse>("/v1/auth/login/google", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GoogleLogin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">Logged in user&#39;s session token</param>
        /// <returns>Object</returns>
        public Object Logout(string token, string token2)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = LogoutWithHttpInfo(token, token2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">Logged in user&#39;s session token</param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> LogoutWithHttpInfo(string token, string token2)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->Logout");

            // verify the required parameter 'token2' is set
            if (token2 == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token2' when calling AuthServiceApi->Logout");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", Snapser.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token2)); // header parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v1/auth/logout/{token}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">Logged in user&#39;s session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LogoutAsync(string token, string token2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = await LogoutWithHttpInfoAsync(token, token2, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Logout User Ends the current session of the user
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Session token to logout</param>
        /// <param name="token2">Logged in user&#39;s session token</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> LogoutWithHttpInfoAsync(string token, string token2, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->Logout");

            // verify the required parameter 'token2' is set
            if (token2 == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token2' when calling AuthServiceApi->Logout");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("token", Snapser.Client.ClientUtils.ParameterToString(token)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token2)); // header parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v1/auth/logout/{token}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate One Time Password Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object Otp(AuthOtpRequest body)
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = OtpWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate One Time Password Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public Snapser.Client.ApiResponse<Object> OtpWithHttpInfo(AuthOtpRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Otp");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/auth/otp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Otp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate One Time Password Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> OtpAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<Object> localVarResponse = await OtpWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate One Time Password Generates an OTP and sends it to the email for logging in
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<Object>> OtpWithHttpInfoAsync(AuthOtpRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Otp");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/auth/otp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Otp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Session Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="body"></param>
        /// <returns>AuthRefreshResponse</returns>
        public AuthRefreshResponse Refresh(string token, AuthRefreshRequest body)
        {
            Snapser.Client.ApiResponse<AuthRefreshResponse> localVarResponse = RefreshWithHttpInfo(token, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Session Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthRefreshResponse</returns>
        public Snapser.Client.ApiResponse<AuthRefreshResponse> RefreshWithHttpInfo(string token, AuthRefreshRequest body)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->Refresh");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Refresh");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Patch<AuthRefreshResponse>("/v1/auth/refresh", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Refresh", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh Session Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthRefreshResponse</returns>
        public async System.Threading.Tasks.Task<AuthRefreshResponse> RefreshAsync(string token, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<AuthRefreshResponse> localVarResponse = await RefreshWithHttpInfoAsync(token, body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh Session Token Refreshes the session and returns a new session token with refreshed validity
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Logged in user&#39;s session token</param>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthRefreshResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthRefreshResponse>> RefreshWithHttpInfoAsync(string token, AuthRefreshRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'token' when calling AuthServiceApi->Refresh");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Refresh");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.HeaderParameters.Add("Token", Snapser.Client.ClientUtils.ParameterToString(token)); // header parameter
            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<AuthRefreshResponse>("/v1/auth/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Refresh", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Session Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>AuthValidateResponse</returns>
        public AuthValidateResponse Validate(AuthValidateRequest body)
        {
            Snapser.Client.ApiResponse<AuthValidateResponse> localVarResponse = ValidateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Session Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AuthValidateResponse</returns>
        public Snapser.Client.ApiResponse<AuthValidateResponse> ValidateWithHttpInfo(AuthValidateRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Validate");

            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthValidateResponse>("/v1/auth/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Validate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Validate Session Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthValidateResponse</returns>
        public async System.Threading.Tasks.Task<AuthValidateResponse> ValidateAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Snapser.Client.ApiResponse<AuthValidateResponse> localVarResponse = await ValidateWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Session Token Validates the session of the user and returns the user info
        /// </summary>
        /// <exception cref="Snapser.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthValidateResponse)</returns>
        public async System.Threading.Tasks.Task<Snapser.Client.ApiResponse<AuthValidateResponse>> ValidateWithHttpInfoAsync(AuthValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Snapser.Client.ApiException(400, "Missing required parameter 'body' when calling AuthServiceApi->Validate");


            Snapser.Client.RequestOptions localVarRequestOptions = new Snapser.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Snapser.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Snapser.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthValidateResponse>("/v1/auth/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Validate", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
