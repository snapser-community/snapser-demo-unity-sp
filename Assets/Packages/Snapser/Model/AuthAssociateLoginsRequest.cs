/*
 * snapship
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: snapship: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// AuthAssociateLoginsRequest
    /// </summary>
    [DataContract(Name = "authAssociateLoginsRequest")]
    public partial class AuthAssociateLoginsRequest : IEquatable<AuthAssociateLoginsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthAssociateLoginsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthAssociateLoginsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthAssociateLoginsRequest" /> class.
        /// </summary>
        /// <param name="discardUserToken">Token of the user to discard (required).</param>
        /// <param name="keepUserToken">Token of the user to keep (required).</param>
        public AuthAssociateLoginsRequest(string discardUserToken = default(string), string keepUserToken = default(string))
        {
            // to ensure "discardUserToken" is required (not null)
            if (discardUserToken == null)
            {
                throw new ArgumentNullException("discardUserToken is a required property for AuthAssociateLoginsRequest and cannot be null");
            }
            this.DiscardUserToken = discardUserToken;
            // to ensure "keepUserToken" is required (not null)
            if (keepUserToken == null)
            {
                throw new ArgumentNullException("keepUserToken is a required property for AuthAssociateLoginsRequest and cannot be null");
            }
            this.KeepUserToken = keepUserToken;
        }

        /// <summary>
        /// Token of the user to discard
        /// </summary>
        /// <value>Token of the user to discard</value>
        [DataMember(Name = "discard_user_token", IsRequired = true, EmitDefaultValue = true)]
        public string DiscardUserToken { get; set; }

        /// <summary>
        /// Token of the user to keep
        /// </summary>
        /// <value>Token of the user to keep</value>
        [DataMember(Name = "keep_user_token", IsRequired = true, EmitDefaultValue = true)]
        public string KeepUserToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthAssociateLoginsRequest {\n");
            sb.Append("  DiscardUserToken: ").Append(DiscardUserToken).Append("\n");
            sb.Append("  KeepUserToken: ").Append(KeepUserToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthAssociateLoginsRequest);
        }

        /// <summary>
        /// Returns true if AuthAssociateLoginsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthAssociateLoginsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthAssociateLoginsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DiscardUserToken == input.DiscardUserToken ||
                    (this.DiscardUserToken != null &&
                    this.DiscardUserToken.Equals(input.DiscardUserToken))
                ) && 
                (
                    this.KeepUserToken == input.KeepUserToken ||
                    (this.KeepUserToken != null &&
                    this.KeepUserToken.Equals(input.KeepUserToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiscardUserToken != null)
                {
                    hashCode = (hashCode * 59) + this.DiscardUserToken.GetHashCode();
                }
                if (this.KeepUserToken != null)
                {
                    hashCode = (hashCode * 59) + this.KeepUserToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
