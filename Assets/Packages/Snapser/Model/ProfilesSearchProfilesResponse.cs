/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// ProfilesSearchProfilesResponse
    /// </summary>
    [DataContract(Name = "profilesSearchProfilesResponse")]
    public partial class ProfilesSearchProfilesResponse : IEquatable<ProfilesSearchProfilesResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesSearchProfilesResponse" /> class.
        /// </summary>
        /// <param name="profiles">Map of user IDs to their respective profiles.</param>
        public ProfilesSearchProfilesResponse(Dictionary<string, Object> profiles = default(Dictionary<string, Object>))
        {
            this.Profiles = profiles;
        }

        /// <summary>
        /// Map of user IDs to their respective profiles
        /// </summary>
        /// <value>Map of user IDs to their respective profiles</value>
        [DataMember(Name = "profiles", EmitDefaultValue = false)]
        public Dictionary<string, Object> Profiles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfilesSearchProfilesResponse {\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfilesSearchProfilesResponse);
        }

        /// <summary>
        /// Returns true if ProfilesSearchProfilesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfilesSearchProfilesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfilesSearchProfilesResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Profiles == input.Profiles ||
                    this.Profiles != null &&
                    input.Profiles != null &&
                    this.Profiles.SequenceEqual(input.Profiles)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Profiles != null)
                {
                    hashCode = (hashCode * 59) + this.Profiles.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
