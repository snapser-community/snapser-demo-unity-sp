/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// AuthXboxLoginRequest
    /// </summary>
    [DataContract(Name = "authXboxLoginRequest")]
    public partial class AuthXboxLoginRequest : IEquatable<AuthXboxLoginRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthXboxLoginRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthXboxLoginRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthXboxLoginRequest" /> class.
        /// </summary>
        /// <param name="code">code generated on the client (required).</param>
        /// <param name="createUser">Whether to create a user, if it does not exist.</param>
        /// <param name="redirectUrl">redirect url for client (required).</param>
        public AuthXboxLoginRequest(string code = default(string), bool createUser = default(bool), string redirectUrl = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for AuthXboxLoginRequest and cannot be null");
            }
            this.Code = code;
            // to ensure "redirectUrl" is required (not null)
            if (redirectUrl == null)
            {
                throw new ArgumentNullException("redirectUrl is a required property for AuthXboxLoginRequest and cannot be null");
            }
            this.RedirectUrl = redirectUrl;
            this.CreateUser = createUser;
        }

        /// <summary>
        /// code generated on the client
        /// </summary>
        /// <value>code generated on the client</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Whether to create a user, if it does not exist
        /// </summary>
        /// <value>Whether to create a user, if it does not exist</value>
        [DataMember(Name = "create_user", EmitDefaultValue = true)]
        public bool CreateUser { get; set; }

        /// <summary>
        /// redirect url for client
        /// </summary>
        /// <value>redirect url for client</value>
        [DataMember(Name = "redirect_url", IsRequired = true, EmitDefaultValue = true)]
        public string RedirectUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthXboxLoginRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreateUser: ").Append(CreateUser).Append("\n");
            sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthXboxLoginRequest);
        }

        /// <summary>
        /// Returns true if AuthXboxLoginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthXboxLoginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthXboxLoginRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CreateUser == input.CreateUser ||
                    this.CreateUser.Equals(input.CreateUser)
                ) && 
                (
                    this.RedirectUrl == input.RedirectUrl ||
                    (this.RedirectUrl != null &&
                    this.RedirectUrl.Equals(input.RedirectUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateUser.GetHashCode();
                if (this.RedirectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.RedirectUrl.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
