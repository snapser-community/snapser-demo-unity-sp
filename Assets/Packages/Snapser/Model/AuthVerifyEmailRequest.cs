/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// AuthVerifyEmailRequest
    /// </summary>
    [DataContract(Name = "authVerifyEmailRequest")]
    public partial class AuthVerifyEmailRequest : IEquatable<AuthVerifyEmailRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthVerifyEmailRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthVerifyEmailRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthVerifyEmailRequest" /> class.
        /// </summary>
        /// <param name="email">Email address to verify (required).</param>
        /// <param name="verificationCode">Verification code received by the user (required).</param>
        public AuthVerifyEmailRequest(string email = default(string), string verificationCode = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for AuthVerifyEmailRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "verificationCode" is required (not null)
            if (verificationCode == null)
            {
                throw new ArgumentNullException("verificationCode is a required property for AuthVerifyEmailRequest and cannot be null");
            }
            this.VerificationCode = verificationCode;
        }

        /// <summary>
        /// Email address to verify
        /// </summary>
        /// <value>Email address to verify</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Verification code received by the user
        /// </summary>
        /// <value>Verification code received by the user</value>
        [DataMember(Name = "verification_code", IsRequired = true, EmitDefaultValue = true)]
        public string VerificationCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthVerifyEmailRequest {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  VerificationCode: ").Append(VerificationCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthVerifyEmailRequest);
        }

        /// <summary>
        /// Returns true if AuthVerifyEmailRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthVerifyEmailRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthVerifyEmailRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.VerificationCode == input.VerificationCode ||
                    (this.VerificationCode != null &&
                    this.VerificationCode.Equals(input.VerificationCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.VerificationCode != null)
                {
                    hashCode = (hashCode * 59) + this.VerificationCode.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
