/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// LeaderboardsBatchGetScoresResponse
    /// </summary>
    [DataContract(Name = "leaderboardsBatchGetScoresResponse")]
    public partial class LeaderboardsBatchGetScoresResponse : IEquatable<LeaderboardsBatchGetScoresResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsBatchGetScoresResponse" /> class.
        /// </summary>
        /// <param name="responses">List of responses with the latest scores.</param>
        /// <param name="userScores">userScores.</param>
        public LeaderboardsBatchGetScoresResponse(List<LeaderboardsBatchGetScoresSingleResponse> responses = default(List<LeaderboardsBatchGetScoresSingleResponse>), List<LeaderboardsTieredUserScore> userScores = default(List<LeaderboardsTieredUserScore>))
        {
            this.Responses = responses;
            this.UserScores = userScores;
        }

        /// <summary>
        /// List of responses with the latest scores
        /// </summary>
        /// <value>List of responses with the latest scores</value>
        [DataMember(Name = "responses", EmitDefaultValue = false)]
        public List<LeaderboardsBatchGetScoresSingleResponse> Responses { get; set; }

        /// <summary>
        /// Gets or Sets UserScores
        /// </summary>
        [DataMember(Name = "user_scores", EmitDefaultValue = false)]
        public List<LeaderboardsTieredUserScore> UserScores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeaderboardsBatchGetScoresResponse {\n");
            sb.Append("  Responses: ").Append(Responses).Append("\n");
            sb.Append("  UserScores: ").Append(UserScores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaderboardsBatchGetScoresResponse);
        }

        /// <summary>
        /// Returns true if LeaderboardsBatchGetScoresResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaderboardsBatchGetScoresResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaderboardsBatchGetScoresResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Responses == input.Responses ||
                    this.Responses != null &&
                    input.Responses != null &&
                    this.Responses.SequenceEqual(input.Responses)
                ) && 
                (
                    this.UserScores == input.UserScores ||
                    this.UserScores != null &&
                    input.UserScores != null &&
                    this.UserScores.SequenceEqual(input.UserScores)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Responses != null)
                {
                    hashCode = (hashCode * 59) + this.Responses.GetHashCode();
                }
                if (this.UserScores != null)
                {
                    hashCode = (hashCode * 59) + this.UserScores.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
