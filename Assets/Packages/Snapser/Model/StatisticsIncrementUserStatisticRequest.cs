/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// StatisticsIncrementUserStatisticRequest
    /// </summary>
    [DataContract(Name = "statisticsIncrementUserStatisticRequest")]
    public partial class StatisticsIncrementUserStatisticRequest : IEquatable<StatisticsIncrementUserStatisticRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsIncrementUserStatisticRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatisticsIncrementUserStatisticRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsIncrementUserStatisticRequest" /> class.
        /// </summary>
        /// <param name="delta">Value to increment the statistic by. Use negative to decrement (required).</param>
        /// <param name="key">Name of the user statistic (required).</param>
        /// <param name="userId">User ID of the user who&#39;s stats are being requested (required).</param>
        public StatisticsIncrementUserStatisticRequest(long delta = default(long), string key = default(string), string userId = default(string))
        {
            this.Delta = delta;
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for StatisticsIncrementUserStatisticRequest and cannot be null");
            }
            this.Key = key;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for StatisticsIncrementUserStatisticRequest and cannot be null");
            }
            this.UserId = userId;
        }

        /// <summary>
        /// Value to increment the statistic by. Use negative to decrement
        /// </summary>
        /// <value>Value to increment the statistic by. Use negative to decrement</value>
        [DataMember(Name = "delta", IsRequired = true, EmitDefaultValue = true)]
        public long Delta { get; set; }

        /// <summary>
        /// Name of the user statistic
        /// </summary>
        /// <value>Name of the user statistic</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// User ID of the user who&#39;s stats are being requested
        /// </summary>
        /// <value>User ID of the user who&#39;s stats are being requested</value>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatisticsIncrementUserStatisticRequest {\n");
            sb.Append("  Delta: ").Append(Delta).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatisticsIncrementUserStatisticRequest);
        }

        /// <summary>
        /// Returns true if StatisticsIncrementUserStatisticRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of StatisticsIncrementUserStatisticRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatisticsIncrementUserStatisticRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Delta == input.Delta ||
                    this.Delta.Equals(input.Delta)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Delta.GetHashCode();
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
