/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// StorageUserCounterResponse
    /// </summary>
    [DataContract(Name = "storageUserCounterResponse")]
    public partial class StorageUserCounterResponse : IEquatable<StorageUserCounterResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageUserCounterResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorageUserCounterResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageUserCounterResponse" /> class.
        /// </summary>
        /// <param name="count">Value of the counter (required).</param>
        /// <param name="ownerId">Counter owner&#39;s user ID.</param>
        public StorageUserCounterResponse(int count = default(int), string ownerId = default(string))
        {
            this.Count = count;
            this.OwnerId = ownerId;
        }

        /// <summary>
        /// Value of the counter
        /// </summary>
        /// <value>Value of the counter</value>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// Counter owner&#39;s user ID
        /// </summary>
        /// <value>Counter owner&#39;s user ID</value>
        [DataMember(Name = "owner_id", EmitDefaultValue = false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StorageUserCounterResponse {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageUserCounterResponse);
        }

        /// <summary>
        /// Returns true if StorageUserCounterResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageUserCounterResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageUserCounterResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.OwnerId != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
