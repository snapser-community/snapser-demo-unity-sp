/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// LeaderboardsIncrementScoreRequest
    /// </summary>
    [DataContract(Name = "leaderboardsIncrementScoreRequest")]
    public partial class LeaderboardsIncrementScoreRequest : IEquatable<LeaderboardsIncrementScoreRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsIncrementScoreRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeaderboardsIncrementScoreRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsIncrementScoreRequest" /> class.
        /// </summary>
        /// <param name="delta">The delta of the score to increment (required).</param>
        /// <param name="leaderboardName">Name of the leaderboard (required).</param>
        /// <param name="tierName">Name of the tier.</param>
        /// <param name="userId">User ID for the user who&#39;s score is being updated (required).</param>
        /// <param name="userMetadata">Metadata to be stored with the user.</param>
        public LeaderboardsIncrementScoreRequest(double delta = default(double), string leaderboardName = default(string), string tierName = default(string), string userId = default(string), Object userMetadata = default(Object))
        {
            this.Delta = delta;
            // to ensure "leaderboardName" is required (not null)
            if (leaderboardName == null)
            {
                throw new ArgumentNullException("leaderboardName is a required property for LeaderboardsIncrementScoreRequest and cannot be null");
            }
            this.LeaderboardName = leaderboardName;
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for LeaderboardsIncrementScoreRequest and cannot be null");
            }
            this.UserId = userId;
            this.TierName = tierName;
            this.UserMetadata = userMetadata;
        }

        /// <summary>
        /// The delta of the score to increment
        /// </summary>
        /// <value>The delta of the score to increment</value>
        [DataMember(Name = "delta", IsRequired = true, EmitDefaultValue = true)]
        public double Delta { get; set; }

        /// <summary>
        /// Name of the leaderboard
        /// </summary>
        /// <value>Name of the leaderboard</value>
        [DataMember(Name = "leaderboard_name", IsRequired = true, EmitDefaultValue = true)]
        public string LeaderboardName { get; set; }

        /// <summary>
        /// Name of the tier
        /// </summary>
        /// <value>Name of the tier</value>
        [DataMember(Name = "tier_name", EmitDefaultValue = false)]
        public string TierName { get; set; }

        /// <summary>
        /// User ID for the user who&#39;s score is being updated
        /// </summary>
        /// <value>User ID for the user who&#39;s score is being updated</value>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Metadata to be stored with the user
        /// </summary>
        /// <value>Metadata to be stored with the user</value>
        [DataMember(Name = "user_metadata", EmitDefaultValue = false)]
        public Object UserMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeaderboardsIncrementScoreRequest {\n");
            sb.Append("  Delta: ").Append(Delta).Append("\n");
            sb.Append("  LeaderboardName: ").Append(LeaderboardName).Append("\n");
            sb.Append("  TierName: ").Append(TierName).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserMetadata: ").Append(UserMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaderboardsIncrementScoreRequest);
        }

        /// <summary>
        /// Returns true if LeaderboardsIncrementScoreRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaderboardsIncrementScoreRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaderboardsIncrementScoreRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Delta == input.Delta ||
                    this.Delta.Equals(input.Delta)
                ) && 
                (
                    this.LeaderboardName == input.LeaderboardName ||
                    (this.LeaderboardName != null &&
                    this.LeaderboardName.Equals(input.LeaderboardName))
                ) && 
                (
                    this.TierName == input.TierName ||
                    (this.TierName != null &&
                    this.TierName.Equals(input.TierName))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserMetadata == input.UserMetadata ||
                    (this.UserMetadata != null &&
                    this.UserMetadata.Equals(input.UserMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Delta.GetHashCode();
                if (this.LeaderboardName != null)
                {
                    hashCode = (hashCode * 59) + this.LeaderboardName.GetHashCode();
                }
                if (this.TierName != null)
                {
                    hashCode = (hashCode * 59) + this.TierName.GetHashCode();
                }
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.UserMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.UserMetadata.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
