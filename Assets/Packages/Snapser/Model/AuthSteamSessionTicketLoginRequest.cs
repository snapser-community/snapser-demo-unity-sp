/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// AuthSteamSessionTicketLoginRequest
    /// </summary>
    [DataContract(Name = "authSteamSessionTicketLoginRequest")]
    public partial class AuthSteamSessionTicketLoginRequest : IEquatable<AuthSteamSessionTicketLoginRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthSteamSessionTicketLoginRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthSteamSessionTicketLoginRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthSteamSessionTicketLoginRequest" /> class.
        /// </summary>
        /// <param name="createUser">Whether to create a user, if it does not exist.</param>
        /// <param name="identity">Identity string used to generate session ticket (if applicable).</param>
        /// <param name="sessionTicket">Session ticket generated on the client (required).</param>
        public AuthSteamSessionTicketLoginRequest(bool createUser = default(bool), string identity = default(string), string sessionTicket = default(string))
        {
            // to ensure "sessionTicket" is required (not null)
            if (sessionTicket == null)
            {
                throw new ArgumentNullException("sessionTicket is a required property for AuthSteamSessionTicketLoginRequest and cannot be null");
            }
            this.SessionTicket = sessionTicket;
            this.CreateUser = createUser;
            this.Identity = identity;
        }

        /// <summary>
        /// Whether to create a user, if it does not exist
        /// </summary>
        /// <value>Whether to create a user, if it does not exist</value>
        [DataMember(Name = "create_user", EmitDefaultValue = true)]
        public bool CreateUser { get; set; }

        /// <summary>
        /// Identity string used to generate session ticket (if applicable)
        /// </summary>
        /// <value>Identity string used to generate session ticket (if applicable)</value>
        [DataMember(Name = "identity", EmitDefaultValue = false)]
        public string Identity { get; set; }

        /// <summary>
        /// Session ticket generated on the client
        /// </summary>
        /// <value>Session ticket generated on the client</value>
        [DataMember(Name = "session_ticket", IsRequired = true, EmitDefaultValue = true)]
        public string SessionTicket { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthSteamSessionTicketLoginRequest {\n");
            sb.Append("  CreateUser: ").Append(CreateUser).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  SessionTicket: ").Append(SessionTicket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthSteamSessionTicketLoginRequest);
        }

        /// <summary>
        /// Returns true if AuthSteamSessionTicketLoginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthSteamSessionTicketLoginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthSteamSessionTicketLoginRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreateUser == input.CreateUser ||
                    this.CreateUser.Equals(input.CreateUser)
                ) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && 
                (
                    this.SessionTicket == input.SessionTicket ||
                    (this.SessionTicket != null &&
                    this.SessionTicket.Equals(input.SessionTicket))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CreateUser.GetHashCode();
                if (this.Identity != null)
                {
                    hashCode = (hashCode * 59) + this.Identity.GetHashCode();
                }
                if (this.SessionTicket != null)
                {
                    hashCode = (hashCode * 59) + this.SessionTicket.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
