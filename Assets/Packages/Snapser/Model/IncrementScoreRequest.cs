/*
 * snapship
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: snapship: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// IncrementScoreRequest
    /// </summary>
    [DataContract(Name = "IncrementScore_request")]
    public partial class IncrementScoreRequest : IEquatable<IncrementScoreRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncrementScoreRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IncrementScoreRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IncrementScoreRequest" /> class.
        /// </summary>
        /// <param name="delta">The delta of the score to increment (required).</param>
        /// <param name="tierName">Name of the tier.</param>
        public IncrementScoreRequest(double delta = default(double), string tierName = default(string))
        {
            this.Delta = delta;
            this.TierName = tierName;
        }

        /// <summary>
        /// The delta of the score to increment
        /// </summary>
        /// <value>The delta of the score to increment</value>
        [DataMember(Name = "delta", IsRequired = true, EmitDefaultValue = true)]
        public double Delta { get; set; }

        /// <summary>
        /// Name of the tier
        /// </summary>
        /// <value>Name of the tier</value>
        [DataMember(Name = "tier_name", EmitDefaultValue = false)]
        public string TierName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncrementScoreRequest {\n");
            sb.Append("  Delta: ").Append(Delta).Append("\n");
            sb.Append("  TierName: ").Append(TierName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncrementScoreRequest);
        }

        /// <summary>
        /// Returns true if IncrementScoreRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of IncrementScoreRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncrementScoreRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Delta == input.Delta ||
                    this.Delta.Equals(input.Delta)
                ) && 
                (
                    this.TierName == input.TierName ||
                    (this.TierName != null &&
                    this.TierName.Equals(input.TierName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Delta.GetHashCode();
                if (this.TierName != null)
                {
                    hashCode = (hashCode * 59) + this.TierName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
