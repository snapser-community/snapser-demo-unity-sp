/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// AuthEpicLoginRequest
    /// </summary>
    [DataContract(Name = "authEpicLoginRequest")]
    public partial class AuthEpicLoginRequest : IEquatable<AuthEpicLoginRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEpicLoginRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthEpicLoginRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEpicLoginRequest" /> class.
        /// </summary>
        /// <param name="code">code generated on the client.</param>
        /// <param name="createUser">Whether to create a user, if it does not exist.</param>
        /// <param name="exchangeCode">exchange_code generated on the client.</param>
        /// <param name="grantType">token generated on the client (required).</param>
        /// <param name="password">exchange_code generated on the client.</param>
        /// <param name="username">exchange_code generated on the client.</param>
        public AuthEpicLoginRequest(string code = default(string), bool createUser = default(bool), string exchangeCode = default(string), string grantType = default(string), string password = default(string), string username = default(string))
        {
            // to ensure "grantType" is required (not null)
            if (grantType == null)
            {
                throw new ArgumentNullException("grantType is a required property for AuthEpicLoginRequest and cannot be null");
            }
            this.GrantType = grantType;
            this.Code = code;
            this.CreateUser = createUser;
            this.ExchangeCode = exchangeCode;
            this.Password = password;
            this.Username = username;
        }

        /// <summary>
        /// code generated on the client
        /// </summary>
        /// <value>code generated on the client</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Whether to create a user, if it does not exist
        /// </summary>
        /// <value>Whether to create a user, if it does not exist</value>
        [DataMember(Name = "create_user", EmitDefaultValue = true)]
        public bool CreateUser { get; set; }

        /// <summary>
        /// exchange_code generated on the client
        /// </summary>
        /// <value>exchange_code generated on the client</value>
        [DataMember(Name = "exchange_code", EmitDefaultValue = false)]
        public string ExchangeCode { get; set; }

        /// <summary>
        /// token generated on the client
        /// </summary>
        /// <value>token generated on the client</value>
        [DataMember(Name = "grant_type", IsRequired = true, EmitDefaultValue = true)]
        public string GrantType { get; set; }

        /// <summary>
        /// exchange_code generated on the client
        /// </summary>
        /// <value>exchange_code generated on the client</value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// exchange_code generated on the client
        /// </summary>
        /// <value>exchange_code generated on the client</value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthEpicLoginRequest {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CreateUser: ").Append(CreateUser).Append("\n");
            sb.Append("  ExchangeCode: ").Append(ExchangeCode).Append("\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthEpicLoginRequest);
        }

        /// <summary>
        /// Returns true if AuthEpicLoginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthEpicLoginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthEpicLoginRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CreateUser == input.CreateUser ||
                    this.CreateUser.Equals(input.CreateUser)
                ) && 
                (
                    this.ExchangeCode == input.ExchangeCode ||
                    (this.ExchangeCode != null &&
                    this.ExchangeCode.Equals(input.ExchangeCode))
                ) && 
                (
                    this.GrantType == input.GrantType ||
                    (this.GrantType != null &&
                    this.GrantType.Equals(input.GrantType))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateUser.GetHashCode();
                if (this.ExchangeCode != null)
                {
                    hashCode = (hashCode * 59) + this.ExchangeCode.GetHashCode();
                }
                if (this.GrantType != null)
                {
                    hashCode = (hashCode * 59) + this.GrantType.GetHashCode();
                }
                if (this.Password != null)
                {
                    hashCode = (hashCode * 59) + this.Password.GetHashCode();
                }
                if (this.Username != null)
                {
                    hashCode = (hashCode * 59) + this.Username.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
