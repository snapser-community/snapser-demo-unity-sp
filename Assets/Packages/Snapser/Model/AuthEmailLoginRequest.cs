/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// AuthEmailLoginRequest
    /// </summary>
    [DataContract(Name = "authEmailLoginRequest")]
    public partial class AuthEmailLoginRequest : IEquatable<AuthEmailLoginRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEmailLoginRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthEmailLoginRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthEmailLoginRequest" /> class.
        /// </summary>
        /// <param name="createUser">Whether to create a user, if it does not exist.</param>
        /// <param name="email">Email address used as login (required).</param>
        /// <param name="otp">OTP code received by the user (required).</param>
        public AuthEmailLoginRequest(bool createUser = default(bool), string email = default(string), string otp = default(string))
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for AuthEmailLoginRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "otp" is required (not null)
            if (otp == null)
            {
                throw new ArgumentNullException("otp is a required property for AuthEmailLoginRequest and cannot be null");
            }
            this.Otp = otp;
            this.CreateUser = createUser;
        }

        /// <summary>
        /// Whether to create a user, if it does not exist
        /// </summary>
        /// <value>Whether to create a user, if it does not exist</value>
        [DataMember(Name = "create_user", EmitDefaultValue = true)]
        public bool CreateUser { get; set; }

        /// <summary>
        /// Email address used as login
        /// </summary>
        /// <value>Email address used as login</value>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// OTP code received by the user
        /// </summary>
        /// <value>OTP code received by the user</value>
        [DataMember(Name = "otp", IsRequired = true, EmitDefaultValue = true)]
        public string Otp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthEmailLoginRequest {\n");
            sb.Append("  CreateUser: ").Append(CreateUser).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Otp: ").Append(Otp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthEmailLoginRequest);
        }

        /// <summary>
        /// Returns true if AuthEmailLoginRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthEmailLoginRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthEmailLoginRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreateUser == input.CreateUser ||
                    this.CreateUser.Equals(input.CreateUser)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Otp == input.Otp ||
                    (this.Otp != null &&
                    this.Otp.Equals(input.Otp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CreateUser.GetHashCode();
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.Otp != null)
                {
                    hashCode = (hashCode * 59) + this.Otp.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
