/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// StatisticsBatchUpdateUserStatisticsItem
    /// </summary>
    [DataContract(Name = "statisticsBatchUpdateUserStatisticsItem")]
    public partial class StatisticsBatchUpdateUserStatisticsItem : IEquatable<StatisticsBatchUpdateUserStatisticsItem>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsBatchUpdateUserStatisticsItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatisticsBatchUpdateUserStatisticsItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsBatchUpdateUserStatisticsItem" /> class.
        /// </summary>
        /// <param name="idx">Index used to determine the order in which operations are executed (required).</param>
        /// <param name="key">Name of the user statistic (required).</param>
        /// <param name="operation">Operation to be performed (increment / set) (required).</param>
        /// <param name="value">Value that the statistic should be set to / incremented by (required).</param>
        public StatisticsBatchUpdateUserStatisticsItem(long idx = default(long), string key = default(string), string operation = default(string), string value = default(string))
        {
            this.Idx = idx;
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for StatisticsBatchUpdateUserStatisticsItem and cannot be null");
            }
            this.Key = key;
            // to ensure "operation" is required (not null)
            if (operation == null)
            {
                throw new ArgumentNullException("operation is a required property for StatisticsBatchUpdateUserStatisticsItem and cannot be null");
            }
            this.Operation = operation;
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new ArgumentNullException("value is a required property for StatisticsBatchUpdateUserStatisticsItem and cannot be null");
            }
            this.Value = value;
        }

        /// <summary>
        /// Index used to determine the order in which operations are executed
        /// </summary>
        /// <value>Index used to determine the order in which operations are executed</value>
        [DataMember(Name = "idx", IsRequired = true, EmitDefaultValue = true)]
        public long Idx { get; set; }

        /// <summary>
        /// Name of the user statistic
        /// </summary>
        /// <value>Name of the user statistic</value>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public string Key { get; set; }

        /// <summary>
        /// Operation to be performed (increment / set)
        /// </summary>
        /// <value>Operation to be performed (increment / set)</value>
        [DataMember(Name = "operation", IsRequired = true, EmitDefaultValue = true)]
        public string Operation { get; set; }

        /// <summary>
        /// Value that the statistic should be set to / incremented by
        /// </summary>
        /// <value>Value that the statistic should be set to / incremented by</value>
        [DataMember(Name = "value", IsRequired = true, EmitDefaultValue = true)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatisticsBatchUpdateUserStatisticsItem {\n");
            sb.Append("  Idx: ").Append(Idx).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatisticsBatchUpdateUserStatisticsItem);
        }

        /// <summary>
        /// Returns true if StatisticsBatchUpdateUserStatisticsItem instances are equal
        /// </summary>
        /// <param name="input">Instance of StatisticsBatchUpdateUserStatisticsItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatisticsBatchUpdateUserStatisticsItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Idx == input.Idx ||
                    this.Idx.Equals(input.Idx)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Idx.GetHashCode();
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                if (this.Operation != null)
                {
                    hashCode = (hashCode * 59) + this.Operation.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
