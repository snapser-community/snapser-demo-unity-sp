/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// StatisticsGetUserStatisticsRequest
    /// </summary>
    [DataContract(Name = "statisticsGetUserStatisticsRequest")]
    public partial class StatisticsGetUserStatisticsRequest : IEquatable<StatisticsGetUserStatisticsRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsGetUserStatisticsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StatisticsGetUserStatisticsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsGetUserStatisticsRequest" /> class.
        /// </summary>
        /// <param name="userId">User ID of the user (required).</param>
        public StatisticsGetUserStatisticsRequest(string userId = default(string))
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException("userId is a required property for StatisticsGetUserStatisticsRequest and cannot be null");
            }
            this.UserId = userId;
        }

        /// <summary>
        /// User ID of the user
        /// </summary>
        /// <value>User ID of the user</value>
        [DataMember(Name = "user_id", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StatisticsGetUserStatisticsRequest {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatisticsGetUserStatisticsRequest);
        }

        /// <summary>
        /// Returns true if StatisticsGetUserStatisticsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of StatisticsGetUserStatisticsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatisticsGetUserStatisticsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
