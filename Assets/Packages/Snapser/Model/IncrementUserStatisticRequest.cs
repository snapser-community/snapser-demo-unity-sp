/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// IncrementUserStatisticRequest
    /// </summary>
    [DataContract(Name = "IncrementUserStatistic_request")]
    public partial class IncrementUserStatisticRequest : IEquatable<IncrementUserStatisticRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncrementUserStatisticRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IncrementUserStatisticRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IncrementUserStatisticRequest" /> class.
        /// </summary>
        /// <param name="delta">Value to increment the statistic by. Use negative to decrement (required).</param>
        public IncrementUserStatisticRequest(long delta = default(long))
        {
            this.Delta = delta;
        }

        /// <summary>
        /// Value to increment the statistic by. Use negative to decrement
        /// </summary>
        /// <value>Value to increment the statistic by. Use negative to decrement</value>
        [DataMember(Name = "delta", IsRequired = true, EmitDefaultValue = true)]
        public long Delta { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncrementUserStatisticRequest {\n");
            sb.Append("  Delta: ").Append(Delta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncrementUserStatisticRequest);
        }

        /// <summary>
        /// Returns true if IncrementUserStatisticRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of IncrementUserStatisticRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncrementUserStatisticRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Delta == input.Delta ||
                    this.Delta.Equals(input.Delta)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Delta.GetHashCode();
                return hashCode;
            }
        }

    }

}
