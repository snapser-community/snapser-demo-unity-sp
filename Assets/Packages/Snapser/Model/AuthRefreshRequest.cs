/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// AuthRefreshRequest
    /// </summary>
    [DataContract(Name = "authRefreshRequest")]
    public partial class AuthRefreshRequest : IEquatable<AuthRefreshRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthRefreshRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuthRefreshRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthRefreshRequest" /> class.
        /// </summary>
        /// <param name="loginMetadata">loginMetadata.</param>
        /// <param name="sessionToken">Session token to refresh (required).</param>
        public AuthRefreshRequest(AuthLoginMetadata loginMetadata = default(AuthLoginMetadata), string sessionToken = default(string))
        {
            // to ensure "sessionToken" is required (not null)
            if (sessionToken == null)
            {
                throw new ArgumentNullException("sessionToken is a required property for AuthRefreshRequest and cannot be null");
            }
            this.SessionToken = sessionToken;
            this.LoginMetadata = loginMetadata;
        }

        /// <summary>
        /// Gets or Sets LoginMetadata
        /// </summary>
        [DataMember(Name = "login_metadata", EmitDefaultValue = false)]
        public AuthLoginMetadata LoginMetadata { get; set; }

        /// <summary>
        /// Session token to refresh
        /// </summary>
        /// <value>Session token to refresh</value>
        [DataMember(Name = "session_token", IsRequired = true, EmitDefaultValue = true)]
        public string SessionToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthRefreshRequest {\n");
            sb.Append("  LoginMetadata: ").Append(LoginMetadata).Append("\n");
            sb.Append("  SessionToken: ").Append(SessionToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthRefreshRequest);
        }

        /// <summary>
        /// Returns true if AuthRefreshRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthRefreshRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthRefreshRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LoginMetadata == input.LoginMetadata ||
                    (this.LoginMetadata != null &&
                    this.LoginMetadata.Equals(input.LoginMetadata))
                ) && 
                (
                    this.SessionToken == input.SessionToken ||
                    (this.SessionToken != null &&
                    this.SessionToken.Equals(input.SessionToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoginMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.LoginMetadata.GetHashCode();
                }
                if (this.SessionToken != null)
                {
                    hashCode = (hashCode * 59) + this.SessionToken.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
