/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// StorageIncrementCounterRequest
    /// </summary>
    [DataContract(Name = "storageIncrementCounterRequest")]
    public partial class StorageIncrementCounterRequest : IEquatable<StorageIncrementCounterRequest>
    {
        /// <summary>
        /// Access to the counter. (public/protected/private)
        /// </summary>
        /// <value>Access to the counter. (public/protected/private)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AccessTypeEnum
        {
            /// <summary>
            /// Enum Public for value: public
            /// </summary>
            [EnumMember(Value = "public")]
            Public = 1,

            /// <summary>
            /// Enum Private for value: private
            /// </summary>
            [EnumMember(Value = "private")]
            Private = 2,

            /// <summary>
            /// Enum Protected for value: protected
            /// </summary>
            [EnumMember(Value = "protected")]
            Protected = 3
        }


        /// <summary>
        /// Access to the counter. (public/protected/private)
        /// </summary>
        /// <value>Access to the counter. (public/protected/private)</value>
        [DataMember(Name = "access_type", IsRequired = true, EmitDefaultValue = true)]
        public AccessTypeEnum AccessType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageIncrementCounterRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StorageIncrementCounterRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageIncrementCounterRequest" /> class.
        /// </summary>
        /// <param name="accessType">Access to the counter. (public/protected/private) (required).</param>
        /// <param name="count">Value to increment the counter by. Use negative to decrement (required).</param>
        /// <param name="counterKey">Counter key (required).</param>
        /// <param name="ownerId">Counter owner&#39;s user ID (required).</param>
        public StorageIncrementCounterRequest(AccessTypeEnum accessType = default(AccessTypeEnum), int count = default(int), string counterKey = default(string), string ownerId = default(string))
        {
            this.AccessType = accessType;
            this.Count = count;
            // to ensure "counterKey" is required (not null)
            if (counterKey == null)
            {
                throw new ArgumentNullException("counterKey is a required property for StorageIncrementCounterRequest and cannot be null");
            }
            this.CounterKey = counterKey;
            // to ensure "ownerId" is required (not null)
            if (ownerId == null)
            {
                throw new ArgumentNullException("ownerId is a required property for StorageIncrementCounterRequest and cannot be null");
            }
            this.OwnerId = ownerId;
        }

        /// <summary>
        /// Value to increment the counter by. Use negative to decrement
        /// </summary>
        /// <value>Value to increment the counter by. Use negative to decrement</value>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// Counter key
        /// </summary>
        /// <value>Counter key</value>
        [DataMember(Name = "counter_key", IsRequired = true, EmitDefaultValue = true)]
        public string CounterKey { get; set; }

        /// <summary>
        /// Counter owner&#39;s user ID
        /// </summary>
        /// <value>Counter owner&#39;s user ID</value>
        [DataMember(Name = "owner_id", IsRequired = true, EmitDefaultValue = true)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StorageIncrementCounterRequest {\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  CounterKey: ").Append(CounterKey).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageIncrementCounterRequest);
        }

        /// <summary>
        /// Returns true if StorageIncrementCounterRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageIncrementCounterRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageIncrementCounterRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccessType == input.AccessType ||
                    this.AccessType.Equals(input.AccessType)
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.CounterKey == input.CounterKey ||
                    (this.CounterKey != null &&
                    this.CounterKey.Equals(input.CounterKey))
                ) && 
                (
                    this.OwnerId == input.OwnerId ||
                    (this.OwnerId != null &&
                    this.OwnerId.Equals(input.OwnerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AccessType.GetHashCode();
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.CounterKey != null)
                {
                    hashCode = (hashCode * 59) + this.CounterKey.GetHashCode();
                }
                if (this.OwnerId != null)
                {
                    hashCode = (hashCode * 59) + this.OwnerId.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
