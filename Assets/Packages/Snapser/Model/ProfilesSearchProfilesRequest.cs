/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// ProfilesSearchProfilesRequest
    /// </summary>
    [DataContract(Name = "profilesSearchProfilesRequest")]
    public partial class ProfilesSearchProfilesRequest : IEquatable<ProfilesSearchProfilesRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesSearchProfilesRequest" /> class.
        /// </summary>
        /// <param name="limit">Maximum number of profiles to return.</param>
        /// <param name="offset">Number of profiles to skip before returning results.</param>
        /// <param name="searchFields">List of search fields to filter profiles by.</param>
        public ProfilesSearchProfilesRequest(int limit = default(int), int offset = default(int), List<ProfilesSearchField> searchFields = default(List<ProfilesSearchField>))
        {
            this.Limit = limit;
            this.Offset = offset;
            this.SearchFields = searchFields;
        }

        /// <summary>
        /// Maximum number of profiles to return
        /// </summary>
        /// <value>Maximum number of profiles to return</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Number of profiles to skip before returning results
        /// </summary>
        /// <value>Number of profiles to skip before returning results</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// List of search fields to filter profiles by
        /// </summary>
        /// <value>List of search fields to filter profiles by</value>
        [DataMember(Name = "search_fields", EmitDefaultValue = false)]
        public List<ProfilesSearchField> SearchFields { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfilesSearchProfilesRequest {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  SearchFields: ").Append(SearchFields).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfilesSearchProfilesRequest);
        }

        /// <summary>
        /// Returns true if ProfilesSearchProfilesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfilesSearchProfilesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfilesSearchProfilesRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.SearchFields == input.SearchFields ||
                    this.SearchFields != null &&
                    input.SearchFields != null &&
                    this.SearchFields.SequenceEqual(input.SearchFields)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                if (this.SearchFields != null)
                {
                    hashCode = (hashCode * 59) + this.SearchFields.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
