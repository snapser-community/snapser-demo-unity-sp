/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// StorageGetJsonBlobResponse
    /// </summary>
    [DataContract(Name = "storageGetJsonBlobResponse")]
    public partial class StorageGetJsonBlobResponse : IEquatable<StorageGetJsonBlobResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageGetJsonBlobResponse" /> class.
        /// </summary>
        /// <param name="cas">CAS value used for future operations.</param>
        /// <param name="value">Value of the blob.</param>
        public StorageGetJsonBlobResponse(string cas = default(string), Object value = default(Object))
        {
            this.Cas = cas;
            this.Value = value;
        }

        /// <summary>
        /// CAS value used for future operations
        /// </summary>
        /// <value>CAS value used for future operations</value>
        [DataMember(Name = "cas", EmitDefaultValue = false)]
        public string Cas { get; set; }

        /// <summary>
        /// Value of the blob
        /// </summary>
        /// <value>Value of the blob</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public Object Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StorageGetJsonBlobResponse {\n");
            sb.Append("  Cas: ").Append(Cas).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageGetJsonBlobResponse);
        }

        /// <summary>
        /// Returns true if StorageGetJsonBlobResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageGetJsonBlobResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageGetJsonBlobResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Cas == input.Cas ||
                    (this.Cas != null &&
                    this.Cas.Equals(input.Cas))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cas != null)
                {
                    hashCode = (hashCode * 59) + this.Cas.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
