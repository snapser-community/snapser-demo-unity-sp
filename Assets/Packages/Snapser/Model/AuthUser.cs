/*
 * snapship
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: snapship: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Snapser.Client.FileParameter;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// AuthUser
    /// </summary>
    [DataContract(Name = "authUser")]
    public partial class AuthUser : IEquatable<AuthUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthUser" /> class.
        /// </summary>
        /// <param name="created">Whether user was created or not.</param>
        /// <param name="createdAt">Unix timestamp of when the user was created.</param>
        /// <param name="id">User ID for the user.</param>
        /// <param name="isBanned">Whether user is banned or not.</param>
        /// <param name="isVerified">Whether user is verified or not.</param>
        /// <param name="refreshedAt">Unix timestamp of when the session was last refreshed (If applicable).</param>
        /// <param name="sessionToken">Session token of the user (If applicable).</param>
        /// <param name="tags">Different tags attached to the user like flagged.</param>
        /// <param name="tokenValiditySeconds">Validity of the token in seconds (If applicable).</param>
        public AuthUser(bool created = default(bool), long createdAt = default(long), string id = default(string), bool isBanned = default(bool), bool isVerified = default(bool), long refreshedAt = default(long), string sessionToken = default(string), List<string> tags = default(List<string>), long tokenValiditySeconds = default(long))
        {
            this.Created = created;
            this.CreatedAt = createdAt;
            this.Id = id;
            this.IsBanned = isBanned;
            this.IsVerified = isVerified;
            this.RefreshedAt = refreshedAt;
            this.SessionToken = sessionToken;
            this.Tags = tags;
            this.TokenValiditySeconds = tokenValiditySeconds;
        }

        /// <summary>
        /// Whether user was created or not
        /// </summary>
        /// <value>Whether user was created or not</value>
        [DataMember(Name = "created", EmitDefaultValue = true)]
        public bool Created { get; set; }

        /// <summary>
        /// Unix timestamp of when the user was created
        /// </summary>
        /// <value>Unix timestamp of when the user was created</value>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public long CreatedAt { get; set; }

        /// <summary>
        /// User ID for the user
        /// </summary>
        /// <value>User ID for the user</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Whether user is banned or not
        /// </summary>
        /// <value>Whether user is banned or not</value>
        [DataMember(Name = "is_banned", EmitDefaultValue = true)]
        public bool IsBanned { get; set; }

        /// <summary>
        /// Whether user is verified or not
        /// </summary>
        /// <value>Whether user is verified or not</value>
        [DataMember(Name = "is_verified", EmitDefaultValue = true)]
        public bool IsVerified { get; set; }

        /// <summary>
        /// Unix timestamp of when the session was last refreshed (If applicable)
        /// </summary>
        /// <value>Unix timestamp of when the session was last refreshed (If applicable)</value>
        [DataMember(Name = "refreshed_at", EmitDefaultValue = false)]
        public long RefreshedAt { get; set; }

        /// <summary>
        /// Session token of the user (If applicable)
        /// </summary>
        /// <value>Session token of the user (If applicable)</value>
        [DataMember(Name = "session_token", EmitDefaultValue = false)]
        public string SessionToken { get; set; }

        /// <summary>
        /// Different tags attached to the user like flagged
        /// </summary>
        /// <value>Different tags attached to the user like flagged</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Validity of the token in seconds (If applicable)
        /// </summary>
        /// <value>Validity of the token in seconds (If applicable)</value>
        [DataMember(Name = "token_validity_seconds", EmitDefaultValue = false)]
        public long TokenValiditySeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthUser {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsBanned: ").Append(IsBanned).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  RefreshedAt: ").Append(RefreshedAt).Append("\n");
            sb.Append("  SessionToken: ").Append(SessionToken).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  TokenValiditySeconds: ").Append(TokenValiditySeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthUser);
        }

        /// <summary>
        /// Returns true if AuthUser instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Created == input.Created ||
                    this.Created.Equals(input.Created)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsBanned == input.IsBanned ||
                    this.IsBanned.Equals(input.IsBanned)
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    this.IsVerified.Equals(input.IsVerified)
                ) && 
                (
                    this.RefreshedAt == input.RefreshedAt ||
                    this.RefreshedAt.Equals(input.RefreshedAt)
                ) && 
                (
                    this.SessionToken == input.SessionToken ||
                    (this.SessionToken != null &&
                    this.SessionToken.Equals(input.SessionToken))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.TokenValiditySeconds == input.TokenValiditySeconds ||
                    this.TokenValiditySeconds.Equals(input.TokenValiditySeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Created.GetHashCode();
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsBanned.GetHashCode();
                hashCode = (hashCode * 59) + this.IsVerified.GetHashCode();
                hashCode = (hashCode * 59) + this.RefreshedAt.GetHashCode();
                if (this.SessionToken != null)
                {
                    hashCode = (hashCode * 59) + this.SessionToken.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TokenValiditySeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
