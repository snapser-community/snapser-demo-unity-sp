/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v1 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// LeaderboardsGetScoresRequest
    /// </summary>
    [DataContract(Name = "leaderboardsGetScoresRequest")]
    public partial class LeaderboardsGetScoresRequest : IEquatable<LeaderboardsGetScoresRequest>
    {
        /// <summary>
        /// Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified
        /// </summary>
        /// <value>Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RangeEnum
        {
            /// <summary>
            /// Enum Top for value: top
            /// </summary>
            [EnumMember(Value = "top")]
            Top = 1,

            /// <summary>
            /// Enum Bottom for value: bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            Bottom = 2,

            /// <summary>
            /// Enum Around for value: around
            /// </summary>
            [EnumMember(Value = "around")]
            Around = 3
        }


        /// <summary>
        /// Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified
        /// </summary>
        /// <value>Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified</value>
        [DataMember(Name = "range", IsRequired = true, EmitDefaultValue = true)]
        public RangeEnum Range { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsGetScoresRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LeaderboardsGetScoresRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsGetScoresRequest" /> class.
        /// </summary>
        /// <param name="count">Number of rankings to be displayed (required).</param>
        /// <param name="leaderboardName">Name of the leaderboard (required).</param>
        /// <param name="offset">For recurring leaderboards, the offset from the latest occurrence of the leaderboard.</param>
        /// <param name="range">Range of the leaderboard requested: &#39;top&#39;, &#39;bottom&#39; or &#39;around&#39; the user specified (required).</param>
        /// <param name="userId">Optional user ID for the user who&#39;s standing is requested.</param>
        /// <param name="withMetadata">Whether the user metadata should be included with the request.</param>
        public LeaderboardsGetScoresRequest(long count = default(long), string leaderboardName = default(string), int offset = default(int), RangeEnum range = default(RangeEnum), string userId = default(string), bool withMetadata = default(bool))
        {
            this.Count = count;
            // to ensure "leaderboardName" is required (not null)
            if (leaderboardName == null)
            {
                throw new ArgumentNullException("leaderboardName is a required property for LeaderboardsGetScoresRequest and cannot be null");
            }
            this.LeaderboardName = leaderboardName;
            this.Range = range;
            this.Offset = offset;
            this.UserId = userId;
            this.WithMetadata = withMetadata;
        }

        /// <summary>
        /// Number of rankings to be displayed
        /// </summary>
        /// <value>Number of rankings to be displayed</value>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public long Count { get; set; }

        /// <summary>
        /// Name of the leaderboard
        /// </summary>
        /// <value>Name of the leaderboard</value>
        [DataMember(Name = "leaderboard_name", IsRequired = true, EmitDefaultValue = true)]
        public string LeaderboardName { get; set; }

        /// <summary>
        /// For recurring leaderboards, the offset from the latest occurrence of the leaderboard
        /// </summary>
        /// <value>For recurring leaderboards, the offset from the latest occurrence of the leaderboard</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// Optional user ID for the user who&#39;s standing is requested
        /// </summary>
        /// <value>Optional user ID for the user who&#39;s standing is requested</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Whether the user metadata should be included with the request
        /// </summary>
        /// <value>Whether the user metadata should be included with the request</value>
        [DataMember(Name = "with_metadata", EmitDefaultValue = true)]
        public bool WithMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeaderboardsGetScoresRequest {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  LeaderboardName: ").Append(LeaderboardName).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  WithMetadata: ").Append(WithMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaderboardsGetScoresRequest);
        }

        /// <summary>
        /// Returns true if LeaderboardsGetScoresRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaderboardsGetScoresRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaderboardsGetScoresRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.LeaderboardName == input.LeaderboardName ||
                    (this.LeaderboardName != null &&
                    this.LeaderboardName.Equals(input.LeaderboardName))
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Range == input.Range ||
                    this.Range.Equals(input.Range)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.WithMetadata == input.WithMetadata ||
                    this.WithMetadata.Equals(input.WithMetadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                if (this.LeaderboardName != null)
                {
                    hashCode = (hashCode * 59) + this.LeaderboardName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                hashCode = (hashCode * 59) + this.Range.GetHashCode();
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.WithMetadata.GetHashCode();
                return hashCode;
            }
        }

    }

}
