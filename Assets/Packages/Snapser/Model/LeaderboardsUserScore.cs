/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// LeaderboardsUserScore
    /// </summary>
    [DataContract(Name = "leaderboardsUserScore")]
    public partial class LeaderboardsUserScore : IEquatable<LeaderboardsUserScore>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LeaderboardsUserScore" /> class.
        /// </summary>
        /// <param name="rank">User&#39;s rank starting with 1.</param>
        /// <param name="score">User&#39;s score.</param>
        /// <param name="userId">User ID of the user.</param>
        /// <param name="userMetadata">User metadata.</param>
        public LeaderboardsUserScore(long rank = default(long), double score = default(double), string userId = default(string), Object userMetadata = default(Object))
        {
            this.Rank = rank;
            this.Score = score;
            this.UserId = userId;
            this.UserMetadata = userMetadata;
        }

        /// <summary>
        /// User&#39;s rank starting with 1
        /// </summary>
        /// <value>User&#39;s rank starting with 1</value>
        [DataMember(Name = "rank", EmitDefaultValue = false)]
        public long Rank { get; set; }

        /// <summary>
        /// User&#39;s score
        /// </summary>
        /// <value>User&#39;s score</value>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public double Score { get; set; }

        /// <summary>
        /// User ID of the user
        /// </summary>
        /// <value>User ID of the user</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// User metadata
        /// </summary>
        /// <value>User metadata</value>
        [DataMember(Name = "user_metadata", EmitDefaultValue = false)]
        public Object UserMetadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LeaderboardsUserScore {\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserMetadata: ").Append(UserMetadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LeaderboardsUserScore);
        }

        /// <summary>
        /// Returns true if LeaderboardsUserScore instances are equal
        /// </summary>
        /// <param name="input">Instance of LeaderboardsUserScore to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LeaderboardsUserScore input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Rank == input.Rank ||
                    this.Rank.Equals(input.Rank)
                ) && 
                (
                    this.Score == input.Score ||
                    this.Score.Equals(input.Score)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserMetadata == input.UserMetadata ||
                    (this.UserMetadata != null &&
                    this.UserMetadata.Equals(input.UserMetadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Rank.GetHashCode();
                hashCode = (hashCode * 59) + this.Score.GetHashCode();
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                if (this.UserMetadata != null)
                {
                    hashCode = (hashCode * 59) + this.UserMetadata.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
