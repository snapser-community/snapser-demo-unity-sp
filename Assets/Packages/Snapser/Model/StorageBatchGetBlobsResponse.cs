/*
 * my-dev-cluster
 *
 * Your custom SDK
 *
 * The version of the OpenAPI document: my-dev-cluster: v6 SDK
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = Snapser.Client.OpenAPIDateConverter;

namespace Snapser.Model
{
    /// <summary>
    /// StorageBatchGetBlobsResponse
    /// </summary>
    [DataContract(Name = "storageBatchGetBlobsResponse")]
    public partial class StorageBatchGetBlobsResponse : IEquatable<StorageBatchGetBlobsResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StorageBatchGetBlobsResponse" /> class.
        /// </summary>
        /// <param name="blobs">blobs.</param>
        /// <param name="results">results.</param>
        public StorageBatchGetBlobsResponse(List<StorageUserBlobResponse> blobs = default(List<StorageUserBlobResponse>), List<StorageBatchGetBlobsSingleResponse> results = default(List<StorageBatchGetBlobsSingleResponse>))
        {
            this.Blobs = blobs;
            this.Results = results;
        }

        /// <summary>
        /// Gets or Sets Blobs
        /// </summary>
        [DataMember(Name = "blobs", EmitDefaultValue = false)]
        public List<StorageUserBlobResponse> Blobs { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", EmitDefaultValue = false)]
        public List<StorageBatchGetBlobsSingleResponse> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StorageBatchGetBlobsResponse {\n");
            sb.Append("  Blobs: ").Append(Blobs).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StorageBatchGetBlobsResponse);
        }

        /// <summary>
        /// Returns true if StorageBatchGetBlobsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of StorageBatchGetBlobsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StorageBatchGetBlobsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Blobs == input.Blobs ||
                    this.Blobs != null &&
                    input.Blobs != null &&
                    this.Blobs.SequenceEqual(input.Blobs)
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Blobs != null)
                {
                    hashCode = (hashCode * 59) + this.Blobs.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
